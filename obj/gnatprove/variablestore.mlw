(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcountB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref =
  { mutable tcountB__content : tcountB }
 
 function tcountB__ref_tcountB__content__projection 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref_tcountB__content__projection
 
 meta "inline:no" function tcountB__ref_tcountB__content__projection
 
 val tcountB__havoc 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB__rep
 use        Ada__text_io__TcountB as Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__TcountB.tcountB) : int =
  (Ada__text_io__TcountB.tcountB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__TcountB.tcountB, 
 predicate in_range = Ada__text_io__TcountB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content : count }
 
 function count__ref_count__content__projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref_count__content__projection
 
 meta "inline:no" function count__ref_count__content__projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count__rep
 use        Ada__text_io__count as Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__count.count) : int =
  (Ada__text_io__count.count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__count.count, 
 predicate in_range = Ada__text_io__count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "max_variable_length" defined at variablestore.ads:8, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__max_variable_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_variable_length [#"variablestore.ads" 8 0 0][@model_trace:2605] [@name:Max_Variable_Length] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "Tcount_typeB" defined at a-contai.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Ada__containers__Tcount_typeB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcount_typeB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcount_typeB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcount_typeB__ref =
  { mutable tcount_typeB__content : tcount_typeB }
 
 function tcount_typeB__ref_tcount_typeB__content__projection 
   (a : tcount_typeB__ref) : tcount_typeB =
  a.tcount_typeB__content
 
 meta "model_projection" function tcount_typeB__ref_tcount_typeB__content__projection
 
 meta "inline:no" function tcount_typeB__ref_tcount_typeB__content__projection
 
 val tcount_typeB__havoc 
   (x : tcount_typeB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tcount_typeB" defined at a-contai.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Ada__containers__Tcount_typeB__rep
 use        Ada__containers__Tcount_typeB as Ada__containers__Tcount_typeB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__containers__Tcount_typeB.tcount_typeB) : int =
  (Ada__containers__Tcount_typeB.tcount_typeB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__containers__Tcount_typeB.tcount_typeB, 
 predicate in_range = Ada__containers__Tcount_typeB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count_type" defined at a-contai.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Ada__containers__count_type
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count_type =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count_type, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count_type__ref =
  { mutable count_type__content : count_type }
 
 function count_type__ref_count_type__content__projection 
   (a : count_type__ref) : count_type =
  a.count_type__content
 
 meta "model_projection" function count_type__ref_count_type__content__projection
 
 meta "inline:no" function count_type__ref_count_type__content__projection
 
 val count_type__havoc 
   (x : count_type__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count_type" defined at a-contai.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Ada__containers__count_type__rep
 use        Ada__containers__count_type as Ada__containers__count_type
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__containers__count_type.count_type) : int =
  (Ada__containers__count_type.count_type'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__containers__count_type.count_type, 
 predicate in_range = Ada__containers__count_type.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "max_entries" defined at variablestore.ads:9, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__max_entries
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_entries [#"variablestore.ads" 9 0 0][@name:Max_Entries] [@model_trace:2615] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining the constant "max_mystring_length" defined at mystring.ads:2 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__variables__max_mystring_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_mystring_length [#"mystring.ads" 2 0 0][@model_trace:68608] [@name:Max_MyString_Length] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T13s" defined at mystring.ads:38 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__mystring__T13s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t13s =
  < range 0 1024 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t13s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t13s__ref =
  { mutable t13s__content : t13s }
 
 function t13s__ref_t13s__content__projection 
   (a : t13s__ref) : t13s =
  a.t13s__content
 
 meta "model_projection" function t13s__ref_t13s__content__projection
 
 meta "inline:no" function t13s__ref_t13s__content__projection
 
 val t13s__havoc 
   (x : t13s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T13s" defined at mystring.ads:38 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__mystring__T13s__rep
 use        Variablestore__variables__mystring__T13s as Variablestore__variables__mystring__T13s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Variablestore__variables__mystring__T13s.t13s) : int =
  (Variablestore__variables__mystring__T13s.t13s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Variablestore__variables__mystring__T13s.t13s, 
 predicate in_range = Variablestore__variables__mystring__T13s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrD1" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tmystringstrD1 =
  < range 1 1024 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tmystringstrD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tmystringstrD1__ref =
  { mutable tmystringstrD1__content : tmystringstrD1 }
 
 function tmystringstrD1__ref_tmystringstrD1__content__projection 
   (a : tmystringstrD1__ref) : tmystringstrD1 =
  a.tmystringstrD1__content
 
 meta "model_projection" function tmystringstrD1__ref_tmystringstrD1__content__projection
 
 meta "inline:no" function tmystringstrD1__ref_tmystringstrD1__content__projection
 
 val tmystringstrD1__havoc 
   (x : tmystringstrD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TmystringstrD1" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__TmystringstrD1__rep
 use        Variablestore__variables__TmystringstrD1 as Variablestore__variables__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Variablestore__variables__TmystringstrD1.tmystringstrD1) : int =
  (Variablestore__variables__TmystringstrD1.tmystringstrD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Variablestore__variables__TmystringstrD1.tmystringstrD1, 
 predicate in_range = Variablestore__variables__TmystringstrD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrB" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__TmystringstrB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep
 use        Variablestore__variables__TmystringstrD1 as Variablestore__variables__TmystringstrD1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Variablestore__variables__TmystringstrD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tmystringstrB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tmystringstrB__ref =
  { mutable tmystringstrB__content : tmystringstrB }
 
 function tmystringstrB__ref_tmystringstrB__content__projection 
   (a : tmystringstrB__ref) : tmystringstrB =
  a.tmystringstrB__content
 
 meta "model_projection" function tmystringstrB__ref_tmystringstrB__content__projection
 
 meta "inline:no" function tmystringstrB__ref_tmystringstrB__content__projection
 
 val tmystringstrB__havoc 
   (x : tmystringstrB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "mystringstr" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__mystringstr
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "mystring" defined at mystring.ads:37 instantiated at variablestore.ads:11, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Variablestore__variables__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variables__mystring__T13s as Variablestore__variables__mystring__T13s
 use        Variablestore__variables__mystring__T13s__rep as Variablestore__variables__mystring__T13s__rep
 use        Variablestore__variables__mystringstr as Variablestore__variables__mystringstr
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type __split_fields =
  { rec__variablestore__variables__mystring__length [@name:Length] [@model_trace:.68517] : Variablestore__variables__mystring__T13s.t13s; rec__variablestore__variables__mystring__str [@model_trace:.68532] [@name:Str] : Array__Int__Standard__character.map }
 
 function __split_fields_rec__variablestore__variables__mystring__length__projection [@name:Length] [@model_trace:.68517] 
   (a : __split_fields) : Variablestore__variables__mystring__T13s.t13s =
  a.rec__variablestore__variables__mystring__length
 
 meta "model_projection" function __split_fields_rec__variablestore__variables__mystring__length__projection
 
 meta "inline:no" function __split_fields_rec__variablestore__variables__mystring__length__projection
 
 function __split_fields_rec__variablestore__variables__mystring__str__projection [@model_trace:.68532] [@name:Str] 
   (a : __split_fields) : Array__Int__Standard__character.map =
  a.rec__variablestore__variables__mystring__str
 
 meta "model_projection" function __split_fields_rec__variablestore__variables__mystring__str__projection
 
 meta "inline:no" function __split_fields_rec__variablestore__variables__mystring__str__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__projection
 
 meta "inline:no" function __rep___split_fields__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate variablestore__variables__mystring__length__pred 
   (a : __rep) =
  true
 val variablestore__variables__mystring__length__pred 
   (a : __rep) : bool
  ensures { result <-> variablestore__variables__mystring__length__pred (a : __rep) }
 
 val rec__variablestore__variables__mystring__length_ 
   (a : __rep) : Variablestore__variables__mystring__T13s.t13s
  requires {  (variablestore__variables__mystring__length__pred a) }
  ensures {  (result = a.__split_fields.rec__variablestore__variables__mystring__length) }
 
 predicate variablestore__variables__mystring__str__pred 
   (a : __rep) =
  true
 val variablestore__variables__mystring__str__pred 
   (a : __rep) : bool
  ensures { result <-> variablestore__variables__mystring__str__pred (a : __rep) }
 
 val rec__variablestore__variables__mystring__str_ 
   (a : __rep) : Array__Int__Standard__character.map
  requires {  (variablestore__variables__mystring__str__pred a) }
  ensures {  (result = a.__split_fields.rec__variablestore__variables__mystring__str) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Variablestore__variables__mystring__T13s__rep.to_rep a.__split_fields.rec__variablestore__variables__mystring__length) = (Variablestore__variables__mystring__T13s__rep.to_rep b.__split_fields.rec__variablestore__variables__mystring__length)) /\ (Variablestore__variables__mystringstr.bool_eq a.__split_fields.rec__variablestore__variables__mystring__str b.__split_fields.rec__variablestore__variables__mystring__str) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "mystring" defined at mystring.ads:37 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__mystring
 use export Variablestore__variables__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type mystring =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant variablestore__variables__mystring__length__first__bit 
   : int

 
 val constant variablestore__variables__mystring__length__last__bit 
   : int

 
 val constant variablestore__variables__mystring__length__position 
   : int

 
 axiom variablestore__variables__mystring__length__first__bit_axiom :
  ((variablestore__variables__mystring__length__first__bit ) >= (0 : int))
 
 axiom variablestore__variables__mystring__length__last__bit_axiom :
  ((variablestore__variables__mystring__length__last__bit ) > (variablestore__variables__mystring__length__first__bit ))
 
 axiom variablestore__variables__mystring__length__position_axiom :
  ((variablestore__variables__mystring__length__position ) >= (0 : int))
 
 val constant variablestore__variables__mystring__str__first__bit 
   : int

 
 val constant variablestore__variables__mystring__str__last__bit 
   : int

 
 val constant variablestore__variables__mystring__str__position 
   : int

 
 axiom variablestore__variables__mystring__str__first__bit_axiom :
  ((variablestore__variables__mystring__str__first__bit ) >= (0 : int))
 
 axiom variablestore__variables__mystring__str__last__bit_axiom :
  ((variablestore__variables__mystring__str__last__bit ) > (variablestore__variables__mystring__str__first__bit ))
 
 axiom variablestore__variables__mystring__str__position_axiom :
  ((variablestore__variables__mystring__str__position ) >= (0 : int))
 
 val function user_eq 
   (a : mystring) (b : mystring) : bool
 
 val constant dummy 
   : mystring

 
 type mystring__ref =
  { mutable mystring__content : mystring }
 
 function mystring__ref_mystring__content__projection 
   (a : mystring__ref) : mystring =
  a.mystring__content
 
 meta "model_projection" function mystring__ref_mystring__content__projection
 
 meta "inline:no" function mystring__ref_mystring__content__projection
 
 val mystring__havoc 
   (x : mystring__ref) : unit
  writes {x}

end

(* Module for defining the constant "m" defined at mystring.ads:8 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__variables__to_string__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variables__mystring as Variablestore__variables__mystring

 val constant m [#"mystring.ads" 8 0 0][@model_projected] [@name:M] [@model_trace:68216] 
   : Variablestore__variables__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:8 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__to_string__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m" defined at mystring.ads:23 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__variables__length__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variables__mystring as Variablestore__variables__mystring

 val constant m [#"mystring.ads" 23 0 0][@model_projected] [@name:M] [@model_trace:68367] 
   : Variablestore__variables__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:23 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__length__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "length" defined at mystring.ads:23 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Variablestore__variables__length
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variables__mystring as Variablestore__variables__mystring

 val function length 
   (m : Variablestore__variables__mystring.mystring) : int
 
 val predicate length__function_guard 
   (temp___result_156 : int) (m : Variablestore__variables__mystring.mystring)

end

(* Module for possibly declaring a logic function for "to_string" defined at mystring.ads:8 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Variablestore__variables__to_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Variablestore__variables__mystring as Variablestore__variables__mystring

 val function to_string 
   (m : Variablestore__variables__mystring.mystring) : Standard__string.string
 
 val predicate to_string__function_guard 
   (temp___result_157 : Standard__string.string) (m : Variablestore__variables__mystring.mystring)

end

(* Module for defining the constant "s" defined at mystring.ads:12 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__variables__from_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"mystring.ads" 12 0 0][@model_projected] [@model_trace:68250] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at mystring.ads:12 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__from_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "from_string" defined at mystring.ads:12 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Variablestore__variables__from_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Variablestore__variables__mystring as Variablestore__variables__mystring

 val function from_string 
   (s : Standard__string.string) : Variablestore__variables__mystring.mystring
 
 val predicate from_string__function_guard 
   (temp___result_158 : Variablestore__variables__mystring.mystring) (s : Standard__string.string)

end

(* Module for defining the constant "m1" defined at mystring.ads:16 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__variables__less__m1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variables__mystring as Variablestore__variables__mystring

 val constant m1 [#"mystring.ads" 16 0 0][@model_projected] [@model_trace:68269] [@name:M1] 
   : Variablestore__variables__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m1" defined at mystring.ads:16 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__less__m1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m2" defined at mystring.ads:16 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__variables__less__m2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variables__mystring as Variablestore__variables__mystring

 val constant m2 [#"mystring.ads" 16 0 0][@model_trace:68278] [@model_projected] [@name:M2] 
   : Variablestore__variables__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m2" defined at mystring.ads:16 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__less__m2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "less" defined at mystring.ads:16 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Variablestore__variables__less
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variables__mystring as Variablestore__variables__mystring

 val function less 
   (m1 : Variablestore__variables__mystring.mystring) (m2 : Variablestore__variables__mystring.mystring) : bool
 
 val predicate less__function_guard 
   (temp___result_159 : bool) (m1 : Variablestore__variables__mystring.mystring) (m2 : Variablestore__variables__mystring.mystring)

end

(* Module for defining the constant "m1" defined at mystring.ads:18 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__variables__equal__m1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variables__mystring as Variablestore__variables__mystring

 val constant m1 [#"mystring.ads" 18 0 0][@model_projected] [@name:M1] [@model_trace:68333] 
   : Variablestore__variables__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m1" defined at mystring.ads:18 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__equal__m1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m2" defined at mystring.ads:18 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__variables__equal__m2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variables__mystring as Variablestore__variables__mystring

 val constant m2 [#"mystring.ads" 18 0 0][@model_projected] [@model_trace:68342] [@name:M2] 
   : Variablestore__variables__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m2" defined at mystring.ads:18 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__equal__m2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T10s" defined at mystring.ads:21 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__equal__L9s__T10s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t10s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t10s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t10s__ref =
  { mutable t10s__content : t10s }
 
 function t10s__ref_t10s__content__projection 
   (a : t10s__ref) : t10s =
  a.t10s__content
 
 meta "model_projection" function t10s__ref_t10s__content__projection
 
 meta "inline:no" function t10s__ref_t10s__content__projection
 
 val t10s__havoc 
   (x : t10s__ref) : unit
  writes {x}

end

(* Module for defining the constant "m" defined at mystring.ads:30 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__variables__get__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variables__mystring as Variablestore__variables__mystring

 val constant m [#"mystring.ads" 30 0 0][@model_projected] [@model_trace:68453] [@name:M] 
   : Variablestore__variables__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:30 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__get__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "index" defined at mystring.ads:30 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__variables__get__index
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant index [#"mystring.ads" 30 0 0][@model_trace:68462] [@name:Index] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "index" defined at mystring.ads:30 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__get__index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get" defined at mystring.ads:30 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Variablestore__variables__get
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variables__mystring as Variablestore__variables__mystring

 val function get 
   (m : Variablestore__variables__mystring.mystring) (index : int) : int
 
 val predicate get__function_guard 
   (temp___result_160 : int) (m : Variablestore__variables__mystring.mystring) (index : int)

end

(* Module for possibly declaring a logic function for "equal" defined at mystring.ads:18 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Variablestore__variables__equal
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variables__mystring as Variablestore__variables__mystring

 val function equal 
   (m1 : Variablestore__variables__mystring.mystring) (m2 : Variablestore__variables__mystring.mystring) : bool
 
 val predicate equal__function_guard 
   (temp___result_161 : bool) (m1 : Variablestore__variables__mystring.mystring) (m2 : Variablestore__variables__mystring.mystring)

end

(* Module for defining the constant "m" defined at mystring.ads:26 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__variables__substring__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variables__mystring as Variablestore__variables__mystring

 val constant m [#"mystring.ads" 26 0 0][@model_trace:68409] [@model_projected] [@name:M] 
   : Variablestore__variables__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:26 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__substring__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "from" defined at mystring.ads:26 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__variables__substring__from
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant from [#"mystring.ads" 26 0 0][@name:From] [@model_trace:68418] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "from" defined at mystring.ads:26 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__substring__from___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "to" defined at mystring.ads:26 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__variables__substring__to
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant to__ [#"mystring.ads" 26 0 0][@model_trace:68427] [@name:To] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "to" defined at mystring.ads:26 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__substring__to___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "substring" defined at mystring.ads:26 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Variablestore__variables__substring
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variables__mystring as Variablestore__variables__mystring

 val function substring 
   (m : Variablestore__variables__mystring.mystring) (from : int) (to__ : int) : Variablestore__variables__mystring.mystring
 
 val predicate substring__function_guard 
   (temp___result_162 : Variablestore__variables__mystring.mystring) (m : Variablestore__variables__mystring.mystring) (from : int) (to__ : int)

end

(* Module for axiomatizing type "TTresultSP1" defined at mystring.adb:6 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__to_string__TTresultSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tTresultSP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tTresultSP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tTresultSP1__ref =
  { mutable tTresultSP1__content : tTresultSP1 }
 
 function tTresultSP1__ref_tTresultSP1__content__projection 
   (a : tTresultSP1__ref) : tTresultSP1 =
  a.tTresultSP1__content
 
 meta "model_projection" function tTresultSP1__ref_tTresultSP1__content__projection
 
 meta "inline:no" function tTresultSP1__ref_tTresultSP1__content__projection
 
 val tTresultSP1__havoc 
   (x : tTresultSP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TresultS" defined at mystring.adb:6 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__to_string__TresultS
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type tresultS =
  string
 
 type tresultS__ref =
  { mutable tresultS__content : tresultS }
 
 function tresultS__ref_tresultS__content__projection 
   (a : tresultS__ref) : tresultS =
  a.tresultS__content
 
 meta "model_projection" function tresultS__ref_tresultS__content__projection
 
 meta "inline:no" function tresultS__ref_tresultS__content__projection
 
 val tresultS__havoc 
   (x : tresultS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T271s" defined at mystring.adb:8 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__to_string__T271s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t271s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t271s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t271s__ref =
  { mutable t271s__content : t271s }
 
 function t271s__ref_t271s__content__projection 
   (a : t271s__ref) : t271s =
  a.t271s__content
 
 meta "model_projection" function t271s__ref_t271s__content__projection
 
 meta "inline:no" function t271s__ref_t271s__content__projection
 
 val t271s__havoc 
   (x : t271s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T272s" defined at mystring.adb:8 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__to_string__T272s
 use export Variablestore__variables__TmystringstrB
 use        "_gnatprove_standard".Main
 use        "int".Int

 type t272s =
  tmystringstrB
 
 type t272s__ref =
  { mutable t272s__content : t272s }
 
 function t272s__ref_t272s__content__projection 
   (a : t272s__ref) : t272s =
  a.t272s__content
 
 meta "model_projection" function t272s__ref_t272s__content__projection
 
 meta "inline:no" function t272s__ref_t272s__content__projection
 
 val t272s__havoc 
   (x : t272s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS274sP1" defined at mystring.adb:12 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__from_string__TS274sP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS274sP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS274sP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS274sP1__ref =
  { mutable tS274sP1__content : tS274sP1 }
 
 function tS274sP1__ref_tS274sP1__content__projection 
   (a : tS274sP1__ref) : tS274sP1 =
  a.tS274sP1__content
 
 meta "model_projection" function tS274sP1__ref_tS274sP1__content__projection
 
 meta "inline:no" function tS274sP1__ref_tS274sP1__content__projection
 
 val tS274sP1__havoc 
   (x : tS274sP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S274s" defined at mystring.adb:12 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__from_string__S274s
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s274s =
  string
 
 type s274s__ref =
  { mutable s274s__content : s274s }
 
 function s274s__ref_s274s__content__projection 
   (a : s274s__ref) : s274s =
  a.s274s__content
 
 meta "model_projection" function s274s__ref_s274s__content__projection
 
 meta "inline:no" function s274s__ref_s274s__content__projection
 
 val s274s__havoc 
   (x : s274s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T275s" defined at mystring.adb:13 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__from_string__T275s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t275s =
  < range 1 1024 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t275s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t275s__ref =
  { mutable t275s__content : t275s }
 
 function t275s__ref_t275s__content__projection 
   (a : t275s__ref) : t275s =
  a.t275s__content
 
 meta "model_projection" function t275s__ref_t275s__content__projection
 
 meta "inline:no" function t275s__ref_t275s__content__projection
 
 val t275s__havoc 
   (x : t275s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T275s" defined at mystring.adb:13 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__from_string__T275s__rep
 use        Variablestore__variables__from_string__T275s as Variablestore__variables__from_string__T275s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Variablestore__variables__from_string__T275s.t275s) : int =
  (Variablestore__variables__from_string__T275s.t275s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Variablestore__variables__from_string__T275s.t275s, 
 predicate in_range = Variablestore__variables__from_string__T275s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T276s" defined at mystring.adb:13 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__from_string__T276s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T277s" defined at mystring.adb:20 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__from_string__L_1__T277s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t277s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t277s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t277s__ref =
  { mutable t277s__content : t277s }
 
 function t277s__ref_t277s__content__projection 
   (a : t277s__ref) : t277s =
  a.t277s__content
 
 meta "model_projection" function t277s__ref_t277s__content__projection
 
 meta "inline:no" function t277s__ref_t277s__content__projection
 
 val t277s__havoc 
   (x : t277s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T288s" defined at mystring.adb:60 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__equal__L_3__L287s__T288s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t288s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t288s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t288s__ref =
  { mutable t288s__content : t288s }
 
 function t288s__ref_t288s__content__projection 
   (a : t288s__ref) : t288s =
  a.t288s__content
 
 meta "model_projection" function t288s__ref_t288s__content__projection
 
 meta "inline:no" function t288s__ref_t288s__content__projection
 
 val t288s__havoc 
   (x : t288s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T286s" defined at mystring.adb:60 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__equal__L_3__L285s__T286s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t286s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t286s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t286s__ref =
  { mutable t286s__content : t286s }
 
 function t286s__ref_t286s__content__projection 
   (a : t286s__ref) : t286s =
  a.t286s__content
 
 meta "model_projection" function t286s__ref_t286s__content__projection
 
 meta "inline:no" function t286s__ref_t286s__content__projection
 
 val t286s__havoc 
   (x : t286s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T291s" defined at mystring.adb:72 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__substring__T291s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t291s =
  < range 1 1024 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t291s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t291s__ref =
  { mutable t291s__content : t291s }
 
 function t291s__ref_t291s__content__projection 
   (a : t291s__ref) : t291s =
  a.t291s__content
 
 meta "model_projection" function t291s__ref_t291s__content__projection
 
 meta "inline:no" function t291s__ref_t291s__content__projection
 
 val t291s__havoc 
   (x : t291s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T291s" defined at mystring.adb:72 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__substring__T291s__rep
 use        Variablestore__variables__substring__T291s as Variablestore__variables__substring__T291s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Variablestore__variables__substring__T291s.t291s) : int =
  (Variablestore__variables__substring__T291s.t291s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Variablestore__variables__substring__T291s.t291s, 
 predicate in_range = Variablestore__variables__substring__T291s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T292s" defined at mystring.adb:72 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__substring__T292s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T293s" defined at mystring.adb:75 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variables__substring__L_4__T293s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t293s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t293s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t293s__ref =
  { mutable t293s__content : t293s }
 
 function t293s__ref_t293s__content__projection 
   (a : t293s__ref) : t293s =
  a.t293s__content
 
 meta "model_projection" function t293s__ref_t293s__content__projection
 
 meta "inline:no" function t293s__ref_t293s__content__projection
 
 val t293s__havoc 
   (x : t293s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "variable" defined at variablestore.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__variable
 use export Variablestore__variables__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type variable =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant variablestore__variables__mystring__length__first__bit 
   : int

 
 val constant variablestore__variables__mystring__length__last__bit 
   : int

 
 val constant variablestore__variables__mystring__length__position 
   : int

 
 axiom variablestore__variables__mystring__length__first__bit_axiom :
  ((variablestore__variables__mystring__length__first__bit ) >= (0 : int))
 
 axiom variablestore__variables__mystring__length__last__bit_axiom :
  ((variablestore__variables__mystring__length__last__bit ) > (variablestore__variables__mystring__length__first__bit ))
 
 axiom variablestore__variables__mystring__length__position_axiom :
  ((variablestore__variables__mystring__length__position ) >= (0 : int))
 
 val constant variablestore__variables__mystring__str__first__bit 
   : int

 
 val constant variablestore__variables__mystring__str__last__bit 
   : int

 
 val constant variablestore__variables__mystring__str__position 
   : int

 
 axiom variablestore__variables__mystring__str__first__bit_axiom :
  ((variablestore__variables__mystring__str__first__bit ) >= (0 : int))
 
 axiom variablestore__variables__mystring__str__last__bit_axiom :
  ((variablestore__variables__mystring__str__last__bit ) > (variablestore__variables__mystring__str__first__bit ))
 
 axiom variablestore__variables__mystring__str__position_axiom :
  ((variablestore__variables__mystring__str__position ) >= (0 : int))
 
 val function user_eq 
   (a : variable) (b : variable) : bool
 
 val constant dummy 
   : variable

 
 type variable__ref =
  { mutable variable__content : variable }
 
 function variable__ref_variable__content__projection 
   (a : variable__ref) : variable =
  a.variable__content
 
 meta "model_projection" function variable__ref_variable__content__projection
 
 meta "inline:no" function variable__ref_variable__content__projection
 
 val variable__havoc 
   (x : variable__ref) : unit
  writes {x}

end

(* Module for axiomatizing the record theory associated to type "database" defined at variablestore.ads:15, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Variablestore__database__rep
 use        "_gnatprove_standard".Main
 use        "int".Int

 type __main_type 
 
 val function __main_eq 
   (a : __main_type) (b : __main_type) : bool
 
 type __rep 
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 val function bool_eq 
   (a : __rep) (b : __rep) : bool

end

(* Module for axiomatizing type "database" defined at variablestore.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Variablestore__database
 use export Variablestore__database__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type database =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val function user_eq 
   (a : database) (b : database) : bool
 
 val constant dummy 
   : database

 
 type database__ref =
  { mutable database__content : database }
 
 function database__ref_database__content__projection 
   (a : database__ref) : database =
  a.database__content
 
 meta "model_projection" function database__ref_database__content__projection
 
 meta "inline:no" function database__ref_database__content__projection
 
 val database__havoc 
   (x : database__ref) : unit
  writes {x}

end

(* Module for defining the constant "d" defined at variablestore.ads:19, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__has_variable__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database

 val constant d [#"variablestore.ads" 19 0 0]
   : Variablestore__database.database

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at variablestore.ads:19, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__has_variable__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "v" defined at variablestore.ads:19, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__has_variable__v
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variable as Variablestore__variable

 val constant v [#"variablestore.ads" 19 0 0][@model_projected] [@model_trace:2696] [@name:V] 
   : Variablestore__variable.variable

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "v" defined at variablestore.ads:19, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__has_variable__v___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "has_variable" defined at variablestore.ads:19, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Variablestore__has_variable
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database
 use        Variablestore__variable as Variablestore__variable

 val function has_variable 
   (d : Variablestore__database.database) (v : Variablestore__variable.variable) : bool
 
 val predicate has_variable__function_guard 
   (temp___result_163 : bool) (d : Variablestore__database.database) (v : Variablestore__variable.variable)

end

(* Module for defining the constant "d" defined at variablestore.ads:21, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__get__2__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database

 val constant d [#"variablestore.ads" 21 0 0]
   : Variablestore__database.database

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at variablestore.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__get__2__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "v" defined at variablestore.ads:21, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__get__2__v
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variable as Variablestore__variable

 val constant v [#"variablestore.ads" 21 0 0][@model_trace:2724] [@model_projected] [@name:V] 
   : Variablestore__variable.variable

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "v" defined at variablestore.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__get__2__v___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get__2" defined at variablestore.ads:21, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Variablestore__get__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database
 use        Variablestore__variable as Variablestore__variable

 val function get__2 
   (d : Variablestore__database.database) (v : Variablestore__variable.variable) : int
 
 val predicate get__2__function_guard 
   (temp___result_164 : int) (d : Variablestore__database.database) (v : Variablestore__variable.variable)

end

(* Module for defining the constant "v" defined at variablestore.ads:24, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__put__v
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variable as Variablestore__variable

 val constant v [#"variablestore.ads" 24 0 0][@model_projected] [@model_trace:2760] [@name:V] 
   : Variablestore__variable.variable

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "v" defined at variablestore.ads:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__put__v___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "value" defined at variablestore.ads:24, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__put__value
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant value [#"variablestore.ads" 24 0 0][@name:Value] [@model_trace:2769] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "value" defined at variablestore.ads:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__put__value___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "d" defined at variablestore.ads:37, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__length__2__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database

 val constant d [#"variablestore.ads" 37 0 0]
   : Variablestore__database.database

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at variablestore.ads:37, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__length__2__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "length__2" defined at variablestore.ads:37, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Variablestore__length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database

 val function length__2 
   (d : Variablestore__database.database) : int
 
 val predicate length__2__function_guard 
   (temp___result_165 : int) (d : Variablestore__database.database)

end

(* Module for defining the constant "v" defined at variablestore.ads:27, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__remove__v
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variable as Variablestore__variable

 val constant v [#"variablestore.ads" 27 0 0][@model_projected] [@model_trace:2810] [@name:V] 
   : Variablestore__variable.variable

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "v" defined at variablestore.ads:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__remove__v___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "s" defined at variablestore.ads:30, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__from_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"variablestore.ads" 30 0 0][@model_trace:2836] [@model_projected] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at variablestore.ads:30, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__from_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "from_string" defined at variablestore.ads:30, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Variablestore__from_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Variablestore__variable as Variablestore__variable

 val function from_string 
   (s : Standard__string.string) : Variablestore__variable.variable
 
 val predicate from_string__function_guard 
   (temp___result_166 : Variablestore__variable.variable) (s : Standard__string.string)

end

(* Module for defining the constant "v" defined at variablestore.ads:32, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__to_string__v
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variable as Variablestore__variable

 val constant v [#"variablestore.ads" 32 0 0][@model_trace:2864] [@model_projected] [@name:V] 
   : Variablestore__variable.variable

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "v" defined at variablestore.ads:32, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__to_string__v___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "to_string" defined at variablestore.ads:32, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Variablestore__to_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Variablestore__variable as Variablestore__variable

 val function to_string 
   (v : Variablestore__variable.variable) : Standard__string.string
 
 val predicate to_string__function_guard 
   (temp___result_167 : Standard__string.string) (v : Variablestore__variable.variable)

end

(* Module for defining the constant "v1" defined at variablestore.ads:34, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__less__v1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variable as Variablestore__variable

 val constant v1 [#"variablestore.ads" 34 0 0][@name:V1] [@model_projected] [@model_trace:2883] 
   : Variablestore__variable.variable

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "v1" defined at variablestore.ads:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__less__v1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "v2" defined at variablestore.ads:34, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__less__v2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variable as Variablestore__variable

 val constant v2 [#"variablestore.ads" 34 0 0][@name:V2] [@model_projected] [@model_trace:2892] 
   : Variablestore__variable.variable

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "v2" defined at variablestore.ads:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__less__v2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "less" defined at variablestore.ads:34, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Variablestore__less
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variable as Variablestore__variable

 val function less 
   (v1 : Variablestore__variable.variable) (v2 : Variablestore__variable.variable) : bool
 
 val predicate less__function_guard 
   (temp___result_168 : bool) (v1 : Variablestore__variable.variable) (v2 : Variablestore__variable.variable)

end

(* Module for defining the constant "v1" defined at variablestore.ads:35, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__equal__v1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variable as Variablestore__variable

 val constant v1 [#"variablestore.ads" 35 0 0][@name:V1] [@model_trace:2911] [@model_projected] 
   : Variablestore__variable.variable

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "v1" defined at variablestore.ads:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__equal__v1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "v2" defined at variablestore.ads:35, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__equal__v2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variable as Variablestore__variable

 val constant v2 [#"variablestore.ads" 35 0 0][@name:V2] [@model_projected] [@model_trace:2920] 
   : Variablestore__variable.variable

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "v2" defined at variablestore.ads:35, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__equal__v2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "equal" defined at variablestore.ads:35, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Variablestore__equal
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variable as Variablestore__variable

 val function equal 
   (v1 : Variablestore__variable.variable) (v2 : Variablestore__variable.variable) : bool
 
 val predicate equal__function_guard 
   (temp___result_169 : bool) (v1 : Variablestore__variable.variable) (v2 : Variablestore__variable.variable)

end

(* Module for defining the constant "d" defined at variablestore.ads:39, created in Gnat2Why.Decls.Translate_Constant *)
module Variablestore__print__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database

 val constant d [#"variablestore.ads" 39 0 0]
   : Variablestore__database.database

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at variablestore.ads:39, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__print__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end
(* Module for defining a ref holding the value of variable "m" defined at mystring.ads:33 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Variable *)
module Variablestore__variables__get_line__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variables__mystring as Variablestore__variables__mystring

 val m__split_fields [#"mystring.ads" 33 0 0][@model_projected] [@name:M] [@model_trace:68481]  : Variablestore__variables__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:33 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__get_line__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "result" defined at mystring.adb:6 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Variable *)
module Variablestore__variables__to_string__result
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val result__ [#"mystring.adb" 6 0 0][@model_trace:110823] [@model_projected] [@name:Result]  : Array__Int__Standard__character.map__ref 
 
 val constant result____first [#"mystring.adb" 6 0 0][@model_projected] [@model_trace:110823'First] [@name:Result] 
   : Standard__integer.integer

 
 val constant result____last [#"mystring.adb" 6 0 0][@model_trace:110823'Last] [@model_projected] [@name:Result] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "result" defined at mystring.adb:6 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__to_string__result___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "m" defined at mystring.adb:13 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Variable *)
module Variablestore__variables__from_string__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variables__mystring as Variablestore__variables__mystring

 val m__split_fields [#"mystring.adb" 13 0 0][@model_projected] [@name:M] [@model_trace:110878]  : Variablestore__variables__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.adb:13 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__from_string__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "j" defined at mystring.adb:14 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Variable *)
module Variablestore__variables__from_string__j
 use        "_gnatprove_standard".Main
 use        "int".Int

 val j [#"mystring.adb" 14 0 0][@model_projected] [@model_trace:110897] [@name:J]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "j" defined at mystring.adb:14 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__from_string__j___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:20 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Variable *)
module Variablestore__variables__from_string__L_1__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 20 0 0][@model_trace:110974] [@model_projected] [@name:I]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:20 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__from_string__L_1__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:29 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Variable *)
module Variablestore__variables__less__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 29 0 0][@model_projected] [@name:I] [@model_trace:111041]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:29 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__less__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:53 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Variable *)
module Variablestore__variables__equal__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 53 0 0][@model_projected] [@model_trace:111218] [@name:I]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:53 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__equal__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "r" defined at mystring.adb:72 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Variable *)
module Variablestore__variables__substring__r
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variables__mystring as Variablestore__variables__mystring

 val r__split_fields [#"mystring.adb" 72 0 0][@model_projected] [@model_trace:111418] [@name:R]  : Variablestore__variables__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "r" defined at mystring.adb:72 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__substring__r___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "j" defined at mystring.adb:73 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Variable *)
module Variablestore__variables__substring__j
 use        "_gnatprove_standard".Main
 use        "int".Int

 val j [#"mystring.adb" 73 0 0][@model_projected] [@model_trace:111441] [@name:J]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "j" defined at mystring.adb:73 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__substring__j___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:75 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Variable *)
module Variablestore__variables__substring__L_4__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 75 0 0][@model_trace:111507] [@model_projected] [@name:I]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:75 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__substring__L_4__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:482, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val item [#"a-textio.ads" 482 0 0][@name:Item] [@model_projected] [@model_trace:18578]  : Array__Int__Standard__character.map__ref 
 
 val constant item__first [#"a-textio.ads" 482 0 0][@model_trace:18578'First] [@name:Item] [@model_projected] 
   : Standard__integer.integer

 
 val constant item__last [#"a-textio.ads" 482 0 0][@name:Item] [@model_trace:18578'Last] [@model_projected] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:482, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "last" defined at a-textio.ads:483, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__2__last
 use        "_gnatprove_standard".Main
 use        "int".Int

 val last [#"a-textio.ads" 483 0 0][@model_trace:18587] [@model_projected] [@name:Last]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "last" defined at a-textio.ads:483, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__2__last___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "d" defined at variablestore.ads:17, created in Gnat2Why.Decls.Translate_Variable *)
module Variablestore__init__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database

 val d [#"variablestore.ads" 17 0 0] : Variablestore__database.database__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at variablestore.ads:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__init__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "d" defined at variablestore.ads:24, created in Gnat2Why.Decls.Translate_Variable *)
module Variablestore__put__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database

 val d [#"variablestore.ads" 24 0 0] : Variablestore__database.database__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at variablestore.ads:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__put__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "d" defined at variablestore.ads:27, created in Gnat2Why.Decls.Translate_Variable *)
module Variablestore__remove__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database

 val d [#"variablestore.ads" 27 0 0] : Variablestore__database.database__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at variablestore.ads:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__remove__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module declaring the external object "ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__file_system
 use        "_gnatprove_standard".Main
 use        "int".Int

 val file_system  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_err  : Main.__private__ref 

end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function line_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate line_length__2__function_guard 
   (temp___result_154 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function page_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate page_length__2__function_guard 
   (temp___result_155 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "get_line" defined at mystring.ads:33 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Variablestore__variables__get_line
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_1" defined at mystring.adb:20 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Variablestore__variables__from_string__L_1
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at mystring.adb:20 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__from_string__L_1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_2" defined at mystring.adb:36 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Variablestore__variables__less__L_2
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at mystring.adb:36 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__less__L_2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_3" defined at mystring.adb:58 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Variablestore__variables__equal__L_3
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_3

end

(* Module giving an empty axiom for the entity "L_3" defined at mystring.adb:58 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__equal__L_3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_4" defined at mystring.adb:75 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Variablestore__variables__substring__L_4
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_4

end

(* Module giving an empty axiom for the entity "L_4" defined at mystring.adb:75 instantiated at variablestore.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Variablestore__variables__substring__L_4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_line__2" defined at a-textio.ads:481, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_line__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "init" defined at variablestore.ads:17, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Variablestore__init
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put" defined at variablestore.ads:24, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Variablestore__put
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "remove" defined at variablestore.ads:27, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Variablestore__remove
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "print" defined at variablestore.ads:39, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Variablestore__print
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__count as Ada__text_io__count

 predicate dynamic_invariant [@inline] 
   (temp___expr_174 : int) (temp___is_init_170 : bool) (temp___skip_constant_171 : bool) (temp___do_toplevel_172 : bool) (temp___do_typ_inv_173 : bool) =
  (if (( temp___is_init_170 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_174)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_174 : int) (temp___is_init_170 : bool) (temp___skip_constant_171 : bool) (temp___do_toplevel_172 : bool) (temp___do_typ_inv_173 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_174 : int) (temp___is_init_170 : bool) (temp___skip_constant_171 : bool) (temp___do_toplevel_172 : bool) (temp___do_typ_inv_173 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_175 : int) (temp___skip_top_level_176 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_175 : int) (temp___skip_top_level_176 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_175 : int) (temp___skip_top_level_176 : bool) }

end

(* Module giving axioms for type "Tcount_typeB" defined at a-contai.ads:20, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__containers__Tcount_typeB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count_type" defined at a-contai.ads:20, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__containers__count_type___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__containers__count_type as Ada__containers__count_type

 predicate dynamic_invariant [@inline] 
   (temp___expr_181 : int) (temp___is_init_177 : bool) (temp___skip_constant_178 : bool) (temp___do_toplevel_179 : bool) (temp___do_typ_inv_180 : bool) =
  (if (( temp___is_init_177 \/ (Ada__containers__count_type.first <= Ada__containers__count_type.last) )) then (
   (Ada__containers__count_type.dynamic_property Ada__containers__count_type.first Ada__containers__count_type.last temp___expr_181)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_181 : int) (temp___is_init_177 : bool) (temp___skip_constant_178 : bool) (temp___do_toplevel_179 : bool) (temp___do_typ_inv_180 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_181 : int) (temp___is_init_177 : bool) (temp___skip_constant_178 : bool) (temp___do_toplevel_179 : bool) (temp___do_typ_inv_180 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_182 : int) (temp___skip_top_level_183 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_182 : int) (temp___skip_top_level_183 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_182 : int) (temp___skip_top_level_183 : bool) }

end

(* Module giving axioms for type "T13s" defined at mystring.ads:38 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__mystring__T13s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrD1" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__TmystringstrD1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrB" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__TmystringstrB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "mystringstr" defined at mystring.ads:36 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__mystringstr___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_188 : Array__Int__Standard__character.map) (temp___is_init_184 : bool) (temp___skip_constant_185 : bool) (temp___do_toplevel_186 : bool) (temp___do_typ_inv_187 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_188 : Array__Int__Standard__character.map) (temp___is_init_184 : bool) (temp___skip_constant_185 : bool) (temp___do_toplevel_186 : bool) (temp___do_typ_inv_187 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_188 : Array__Int__Standard__character.map) (temp___is_init_184 : bool) (temp___skip_constant_185 : bool) (temp___do_toplevel_186 : bool) (temp___do_typ_inv_187 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_190 : Array__Int__Standard__character.map) (temp___skip_top_level_191 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_190 : Array__Int__Standard__character.map) (temp___skip_top_level_191 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_190 : Array__Int__Standard__character.map) (temp___skip_top_level_191 : bool) }

end

(* Module giving axioms for type "mystring" defined at mystring.ads:37 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__mystring___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variables__mystring as Variablestore__variables__mystring

 predicate dynamic_invariant [@inline] 
   (temp___expr_198 : Variablestore__variables__mystring.mystring) (temp___is_init_194 : bool) (temp___skip_constant_195 : bool) (temp___do_toplevel_196 : bool) (temp___do_typ_inv_197 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_198 : Variablestore__variables__mystring.mystring) (temp___is_init_194 : bool) (temp___skip_constant_195 : bool) (temp___do_toplevel_196 : bool) (temp___do_typ_inv_197 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_198 : Variablestore__variables__mystring.mystring) (temp___is_init_194 : bool) (temp___skip_constant_195 : bool) (temp___do_toplevel_196 : bool) (temp___do_typ_inv_197 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_200 : Variablestore__variables__mystring.mystring) (temp___skip_top_level_201 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_200 : Variablestore__variables__mystring.mystring) (temp___skip_top_level_201 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_200 : Variablestore__variables__mystring.mystring) (temp___skip_top_level_201 : bool) }

end

(* Module giving axioms for type "T10s" defined at mystring.ads:21 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__equal__L9s__T10s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TTresultSP1" defined at mystring.adb:6 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__to_string__TTresultSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TresultS" defined at mystring.adb:6 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__to_string__TresultS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Variablestore__variables__mystring as Variablestore__variables__mystring
 use        Variablestore__variables__to_string__m as Variablestore__variables__to_string__m
 use        Variablestore__variables__mystring__T13s as Variablestore__variables__mystring__T13s
 use        Variablestore__variables__mystring__T13s__rep as Variablestore__variables__mystring__T13s__rep
 use        Variablestore__variables__to_string__TresultS as Variablestore__variables__to_string__TresultS

 predicate dynamic_invariant [@inline] 
   (temp___expr_250 : Variablestore__variables__to_string__TresultS.tresultS) (temp___is_init_246 : bool) (temp___skip_constant_247 : bool) (temp___do_toplevel_248 : bool) (temp___do_typ_inv_249 : bool) =
  (if (temp___skip_constant_247) then (
   true) else (
   ( (Variablestore__variables__to_string__TresultS.dynamic_property (1 : int) (Variablestore__variables__mystring__T13s__rep.to_rep Variablestore__variables__to_string__m.m.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length) (Variablestore__variables__to_string__TresultS.first temp___expr_250) (Variablestore__variables__to_string__TresultS.last temp___expr_250)) /\ ( ((Variablestore__variables__to_string__TresultS.first temp___expr_250) = (1 : int)) /\ ((Variablestore__variables__to_string__TresultS.last temp___expr_250) = (Variablestore__variables__mystring__T13s__rep.to_rep Variablestore__variables__to_string__m.m.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_250 : Variablestore__variables__to_string__TresultS.tresultS) (temp___is_init_246 : bool) (temp___skip_constant_247 : bool) (temp___do_toplevel_248 : bool) (temp___do_typ_inv_249 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_250 : Variablestore__variables__to_string__TresultS.tresultS) (temp___is_init_246 : bool) (temp___skip_constant_247 : bool) (temp___do_toplevel_248 : bool) (temp___do_typ_inv_249 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_252 : Variablestore__variables__to_string__TresultS.tresultS) (temp___skip_top_level_253 : bool) =
  ( ( true /\ ((Variablestore__variables__to_string__TresultS.first temp___expr_252) = (1 : int)) )/\((Variablestore__variables__to_string__TresultS.last temp___expr_252) = (Variablestore__variables__mystring__T13s__rep.to_rep Variablestore__variables__to_string__m.m.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length)) )
 val default_initial_assumption [@inline] 
   (temp___expr_252 : Variablestore__variables__to_string__TresultS.tresultS) (temp___skip_top_level_253 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_252 : Variablestore__variables__to_string__TresultS.tresultS) (temp___skip_top_level_253 : bool) }

end

(* Module giving axioms for type "T271s" defined at mystring.adb:8 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__to_string__T271s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T272s" defined at mystring.adb:8 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__to_string__T272s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS274sP1" defined at mystring.adb:12 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__from_string__TS274sP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S274s" defined at mystring.adb:12 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__from_string__S274s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Variablestore__variables__from_string__s as Variablestore__variables__from_string__s
 use        Variablestore__variables__from_string__S274s as Variablestore__variables__from_string__S274s

 predicate dynamic_invariant [@inline] 
   (temp___expr_260 : Variablestore__variables__from_string__S274s.s274s) (temp___is_init_256 : bool) (temp___skip_constant_257 : bool) (temp___do_toplevel_258 : bool) (temp___do_typ_inv_259 : bool) =
  (if (temp___skip_constant_257) then (
   true) else (
   ( (Variablestore__variables__from_string__S274s.dynamic_property (Standard__string.first Variablestore__variables__from_string__s.s) (Standard__string.last Variablestore__variables__from_string__s.s) (Variablestore__variables__from_string__S274s.first temp___expr_260) (Variablestore__variables__from_string__S274s.last temp___expr_260)) /\ ( ((Variablestore__variables__from_string__S274s.first temp___expr_260) = (Standard__string.first Variablestore__variables__from_string__s.s)) /\ ((Variablestore__variables__from_string__S274s.last temp___expr_260) = (Standard__string.last Variablestore__variables__from_string__s.s)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_260 : Variablestore__variables__from_string__S274s.s274s) (temp___is_init_256 : bool) (temp___skip_constant_257 : bool) (temp___do_toplevel_258 : bool) (temp___do_typ_inv_259 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_260 : Variablestore__variables__from_string__S274s.s274s) (temp___is_init_256 : bool) (temp___skip_constant_257 : bool) (temp___do_toplevel_258 : bool) (temp___do_typ_inv_259 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_262 : Variablestore__variables__from_string__S274s.s274s) (temp___skip_top_level_263 : bool) =
  ( ( true /\ ((Variablestore__variables__from_string__S274s.first temp___expr_262) = (Standard__string.first Variablestore__variables__from_string__s.s)) )/\((Variablestore__variables__from_string__S274s.last temp___expr_262) = (Standard__string.last Variablestore__variables__from_string__s.s)) )
 val default_initial_assumption [@inline] 
   (temp___expr_262 : Variablestore__variables__from_string__S274s.s274s) (temp___skip_top_level_263 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_262 : Variablestore__variables__from_string__S274s.s274s) (temp___skip_top_level_263 : bool) }

end

(* Module giving axioms for type "T275s" defined at mystring.adb:13 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__from_string__T275s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T276s" defined at mystring.adb:13 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__from_string__T276s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T277s" defined at mystring.adb:20 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__from_string__L_1__T277s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T288s" defined at mystring.adb:60 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__equal__L_3__L287s__T288s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T286s" defined at mystring.adb:60 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__equal__L_3__L285s__T286s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T291s" defined at mystring.adb:72 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__substring__T291s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T292s" defined at mystring.adb:72 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__substring__T292s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T293s" defined at mystring.adb:75 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variables__substring__L_4__T293s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "variable" defined at variablestore.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__variable___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variable as Variablestore__variable

 predicate dynamic_invariant [@inline] 
   (temp___expr_272 : Variablestore__variable.variable) (temp___is_init_268 : bool) (temp___skip_constant_269 : bool) (temp___do_toplevel_270 : bool) (temp___do_typ_inv_271 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_272 : Variablestore__variable.variable) (temp___is_init_268 : bool) (temp___skip_constant_269 : bool) (temp___do_toplevel_270 : bool) (temp___do_typ_inv_271 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_272 : Variablestore__variable.variable) (temp___is_init_268 : bool) (temp___skip_constant_269 : bool) (temp___do_toplevel_270 : bool) (temp___do_typ_inv_271 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_274 : Variablestore__variable.variable) (temp___skip_top_level_275 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_274 : Variablestore__variable.variable) (temp___skip_top_level_275 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_274 : Variablestore__variable.variable) (temp___skip_top_level_275 : bool) }

end

(* Module giving axioms for type "database" defined at variablestore.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Variablestore__database___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database

 predicate dynamic_invariant [@inline] 
   (temp___expr_284 : Variablestore__database.database) (temp___is_init_280 : bool) (temp___skip_constant_281 : bool) (temp___do_toplevel_282 : bool) (temp___do_typ_inv_283 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_284 : Variablestore__database.database) (temp___is_init_280 : bool) (temp___skip_constant_281 : bool) (temp___do_toplevel_282 : bool) (temp___do_typ_inv_283 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_284 : Variablestore__database.database) (temp___is_init_280 : bool) (temp___skip_constant_281 : bool) (temp___do_toplevel_282 : bool) (temp___do_typ_inv_283 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_285 : Variablestore__database.database) (temp___skip_top_level_286 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_285 : Variablestore__database.database) (temp___skip_top_level_286 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_285 : Variablestore__database.database) (temp___skip_top_level_286 : bool) }

end

(* Module for declaring an abstract function for the aggregate at mystring.adb:13 instantiated at variablestore.ads:11, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_317
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp_____aggregate_def_317 
   (temp___319 : int) : Array__Int__Standard__character.map

end

(* Module for declaring an abstract function for the aggregate at mystring.adb:72 instantiated at variablestore.ads:11, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_367
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp_____aggregate_def_367 
   (temp___369 : int) : Array__Int__Standard__character.map

end
(* Module for defining the value of constant "max_variable_length" defined at variablestore.ads:8, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Variablestore__max_variable_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Variablestore__max_variable_length as Variablestore__max_variable_length

 axiom max_variable_length__def_axiom :
  ((Variablestore__max_variable_length.max_variable_length ) = (1024 : int))

end

(* Module for defining the value of constant "max_entries" defined at variablestore.ads:9, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Variablestore__max_entries___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Variablestore__max_entries as Variablestore__max_entries

 axiom max_entries__def_axiom :
  ((Variablestore__max_entries.max_entries ) = (1000 : int))

end

(* Module for defining the value of constant "max_mystring_length" defined at mystring.ads:2 instantiated at variablestore.ads:11, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Variablestore__variables__max_mystring_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Variablestore__variables__max_mystring_length as Variablestore__variables__max_mystring_length

 axiom max_mystring_length__def_axiom :
  ((Variablestore__variables__max_mystring_length.max_mystring_length ) = (1024 : int))

end

(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val line_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom line_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val page_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom page_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module giving a program function and a defining axiom for the expression function "length" defined at mystring.ads:23 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Variablestore__variables__length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Variablestore__variables__mystring as Variablestore__variables__mystring
 use        Variablestore__variables__length as Variablestore__variables__length
 use        Variablestore__variables__mystring___axiom as Variablestore__variables__mystring___axiom
 use        Variablestore__variables__mystring__T13s as Variablestore__variables__mystring__T13s
 use        Variablestore__variables__mystring__T13s__rep as Variablestore__variables__mystring__T13s__rep

 val length 
   (m : Variablestore__variables__mystring.mystring) : int
  requires {  true }
  ensures {  ( ( (result = (Variablestore__variables__length.length m)) /\ (Variablestore__variables__length.length__function_guard result m) )/\( (Standard__natural___axiom.dynamic_invariant result True False True True) /\ ( (result = (Variablestore__variables__mystring__T13s__rep.to_rep m.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length)) /\ ( [@GP_Pretty_Ada:68755] (result <= (1024 : int)) ) ) ) ) }
 
 axiom length__post_axiom :
  (forall m   : Variablestore__variables__mystring.mystring [(Variablestore__variables__length.length m)].
   ( (Variablestore__variables__mystring___axiom.dynamic_invariant m True True True True) -> (let result = (Variablestore__variables__length.length m) in (
    (if ((Variablestore__variables__length.length__function_guard result m)) then (
     ( ( ( [@GP_Pretty_Ada:68755] (result <= (1024 : int)) ) /\ (Standard__natural___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))
 
 axiom length__def_axiom :
  (forall m   : Variablestore__variables__mystring.mystring [(Variablestore__variables__length.length m)].
   ( ( (Variablestore__variables__mystring___axiom.dynamic_invariant m True True True True) /\ (let result = (Variablestore__variables__length.length m) in (
    (Variablestore__variables__length.length__function_guard result m)))
    ) -> ((Variablestore__variables__length.length m) = (Variablestore__variables__mystring__T13s__rep.to_rep m.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length)) ))

end

(* Module for declaring a program function (and possibly an axiom) for "to_string" defined at mystring.ads:8 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Variablestore__variables__to_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Variablestore__variables__mystring as Variablestore__variables__mystring
 use        Variablestore__variables__length as Variablestore__variables__length
 use        Variablestore__variables__to_string as Variablestore__variables__to_string
 use        Variablestore__variables__mystring___axiom as Variablestore__variables__mystring___axiom

 val to_string 
   (m : Variablestore__variables__mystring.mystring) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Variablestore__variables__to_string.to_string m)) /\ (Variablestore__variables__to_string.to_string__function_guard result m) )/\( (Standard__string___axiom.dynamic_invariant result True False True True) /\ ( ( ( [@GP_Pretty_Ada:68188] ((Standard__string.length result) = (epsilon temp___result_208 : int.
   ( (temp___result_208 = (Variablestore__variables__length.length m)) /\ (Variablestore__variables__length.length__function_guard temp___result_208 m) ))) ) /\ ( [@GP_Pretty_Ada:68195] ((Standard__string.first result) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:68200] ((Standard__string.last result) = (epsilon temp___result_209 : int.
   ( (temp___result_209 = (Variablestore__variables__length.length m)) /\ (Variablestore__variables__length.length__function_guard temp___result_209 m) ))) ) ) ) ) }
 
 axiom to_string__post_axiom :
  (forall m   : Variablestore__variables__mystring.mystring [(Variablestore__variables__to_string.to_string m)].
   ( (Variablestore__variables__mystring___axiom.dynamic_invariant m True True True True) -> (let result = (Variablestore__variables__to_string.to_string m) in (
    (if ((Variablestore__variables__to_string.to_string__function_guard result m)) then (
     ( ( ( ( ( [@GP_Pretty_Ada:68188] ((Standard__string.length result) = (epsilon temp___result_212 : int.
      ( (temp___result_212 = (Variablestore__variables__length.length m)) /\ (Variablestore__variables__length.length__function_guard temp___result_212 m) ))) ) /\ ( [@GP_Pretty_Ada:68195] ((Standard__string.first result) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:68200] ((Standard__string.last result) = (epsilon temp___result_213 : int.
      ( (temp___result_213 = (Variablestore__variables__length.length m)) /\ (Variablestore__variables__length.length__function_guard temp___result_213 m) ))) ) ) /\ (Standard__string___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at mystring.ads:12 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Variablestore__variables__from_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Variablestore__variables__mystring as Variablestore__variables__mystring
 use        Variablestore__variables__length as Variablestore__variables__length
 use        Variablestore__variables__from_string as Variablestore__variables__from_string
 use        Variablestore__variables__mystring___axiom as Variablestore__variables__mystring___axiom

 val from_string 
   (s : Standard__string.string) : Variablestore__variables__mystring.mystring
  requires {  ( [@GP_Pretty_Ada:68673] ((Standard__string.length s) <= (1024 : int)) ) }
  ensures {  ( ( (result = (Variablestore__variables__from_string.from_string s)) /\ (Variablestore__variables__from_string.from_string__function_guard result s) )/\( (Variablestore__variables__mystring___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:68687] ((epsilon temp___result_216 : int.
   ( (temp___result_216 = (Variablestore__variables__length.length result)) /\ (Variablestore__variables__length.length__function_guard temp___result_216 result) )) = (Standard__string.length s)) ) ) ) }
 
 axiom from_string__post_axiom :
  (forall s   : Standard__string.string [(Variablestore__variables__from_string.from_string s)].
   ( ( (Standard__string___axiom.dynamic_invariant s True True True True) /\ ( [@GP_Pretty_Ada:68673] ((Standard__string.length s) <= (1024 : int)) ) ) -> (let result = (Variablestore__variables__from_string.from_string s) in (
    (if ((Variablestore__variables__from_string.from_string__function_guard result s)) then (
     ( ( ( [@GP_Pretty_Ada:68687] ((epsilon temp___result_219 : int.
      ( (temp___result_219 = (Variablestore__variables__length.length result)) /\ (Variablestore__variables__length.length__function_guard temp___result_219 result) )) = (Standard__string.length s)) ) /\ (Variablestore__variables__mystring___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "less" defined at mystring.ads:16 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Variablestore__variables__less___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variables__mystring as Variablestore__variables__mystring
 use        Variablestore__variables__less as Variablestore__variables__less

 val less 
   (m1 : Variablestore__variables__mystring.mystring) (m2 : Variablestore__variables__mystring.mystring) : bool
  requires {  true }
  ensures {  ( ( (result = (Variablestore__variables__less.less m1 m2)) /\ (Variablestore__variables__less.less__function_guard result m1 m2) )/\true ) }

end

(* Module giving a program function and a defining axiom for the expression function "get" defined at mystring.ads:30 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Variablestore__variables__get___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Variablestore__variables__mystring as Variablestore__variables__mystring
 use        Variablestore__variables__length as Variablestore__variables__length
 use        Variablestore__variables__get as Variablestore__variables__get
 use        Variablestore__variables__mystring___axiom as Variablestore__variables__mystring___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val get 
   (m : Variablestore__variables__mystring.mystring) (index : int) : int
  requires {  ( [@GP_Pretty_Ada:68823] (index <= (epsilon temp___result_224 : int.
   ( (temp___result_224 = (Variablestore__variables__length.length m)) /\ (Variablestore__variables__length.length__function_guard temp___result_224 m) ))) ) }
  ensures {  ( ( (result = (Variablestore__variables__get.get m index)) /\ (Variablestore__variables__get.get__function_guard result m index) )/\( (Standard__character___axiom.dynamic_invariant result True False True True) /\ (result = (Standard__character__rep.to_rep (let temp___225 [@mlw:proxy_symbol] [@introduced] = m.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str in (
   (Array__Int__Standard__character.get temp___225 index)))
  )) ) ) }
 
 axiom get__post_axiom :
  (forall m   : Variablestore__variables__mystring.mystring.
  (forall index   : int [(Variablestore__variables__get.get m index)].
   ( ( ( (Variablestore__variables__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant index True True True True) ) /\ ( [@GP_Pretty_Ada:68823] (index <= (epsilon temp___result_227 : int.
    ( (temp___result_227 = (Variablestore__variables__length.length m)) /\ (Variablestore__variables__length.length__function_guard temp___result_227 m) ))) ) ) -> (let result = (Variablestore__variables__get.get m index) in (
    (if ((Variablestore__variables__get.get__function_guard result m index)) then (
     ( ( true /\ (Standard__character___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))
 
 axiom get__def_axiom :
  (forall m   : Variablestore__variables__mystring.mystring.
  (forall index   : int [(Variablestore__variables__get.get m index)].
   ( ( ( (Variablestore__variables__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant index True True True True) ) /\ (let result = (Variablestore__variables__get.get m index) in (
    (Variablestore__variables__get.get__function_guard result m index)))
    ) -> ((Variablestore__variables__get.get m index) = (Standard__character__rep.to_rep (let temp___229 [@mlw:proxy_symbol] [@introduced] = m.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str in (
    (Array__Int__Standard__character.get temp___229 index)))
   )) )))

end

(* Module for declaring a program function (and possibly an axiom) for "equal" defined at mystring.ads:18 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Variablestore__variables__equal___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Variablestore__variables__mystring as Variablestore__variables__mystring
 use        Variablestore__variables__length as Variablestore__variables__length
 use        Variablestore__variables__get as Variablestore__variables__get
 use        Variablestore__variables__equal as Variablestore__variables__equal

 val equal 
   (m1 : Variablestore__variables__mystring.mystring) (m2 : Variablestore__variables__mystring.mystring) : bool
  requires {  true }
  ensures {  ( ( (result = (Variablestore__variables__equal.equal m1 m2)) /\ (Variablestore__variables__equal.equal__function_guard result m1 m2) )/\(if ((result = True)) then (
   ( ( [@GP_Pretty_Ada:68294] ((epsilon temp___result_230 : int.
    ( (temp___result_230 = (Variablestore__variables__length.length m1)) /\ (Variablestore__variables__length.length__function_guard temp___result_230 m1) )) = (epsilon temp___result_231 : int.
    ( (temp___result_231 = (Variablestore__variables__length.length m2)) /\ (Variablestore__variables__length.length__function_guard temp___result_231 m2) ))) ) /\ (forall i   [@model_trace:68312] [@name:I]  : int.
    ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_232 : int.
     ( (temp___result_232 = (Variablestore__variables__length.length m1)) /\ (Variablestore__variables__length.length__function_guard temp___result_232 m1) ))) ) -> ( [@GP_Pretty_Ada:68302] ((epsilon temp___result_233 : int.
     ( (temp___result_233 = (Variablestore__variables__get.get m1 i)) /\ (Variablestore__variables__get.get__function_guard temp___result_233 m1 i) )) = (epsilon temp___result_234 : int.
     ( (temp___result_234 = (Variablestore__variables__get.get m2 i)) /\ (Variablestore__variables__get.get__function_guard temp___result_234 m2 i) ))) ) )) )) else (
   ( [@GP_Pretty_Ada:68901] true ))) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "substring" defined at mystring.ads:26 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Variablestore__variables__substring___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Variablestore__variables__mystring as Variablestore__variables__mystring
 use        Variablestore__variables__length as Variablestore__variables__length
 use        Variablestore__variables__substring as Variablestore__variables__substring
 use        Variablestore__variables__mystring___axiom as Variablestore__variables__mystring___axiom

 val substring 
   (m : Variablestore__variables__mystring.mystring) (from : int) (to__ : int) : Variablestore__variables__mystring.mystring
  requires {  ( ( [@GP_Pretty_Ada:68380] (from <= to__) ) /\ ( [@GP_Pretty_Ada:68383] (to__ <= (epsilon temp___result_237 : int.
   ( (temp___result_237 = (Variablestore__variables__length.length m)) /\ (Variablestore__variables__length.length__function_guard temp___result_237 m) ))) ) ) }
  ensures {  ( ( (result = (Variablestore__variables__substring.substring m from to__)) /\ (Variablestore__variables__substring.substring__function_guard result m from to__) )/\( (Variablestore__variables__mystring___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:68796] ((epsilon temp___result_238 : int.
   ( (temp___result_238 = (Variablestore__variables__length.length result)) /\ (Variablestore__variables__length.length__function_guard temp___result_238 result) )) = ((to__ - from) + (1 : int))) ) ) ) }
 
 axiom substring__post_axiom :
  (forall m   : Variablestore__variables__mystring.mystring.
  (forall from   to__   : int [(Variablestore__variables__substring.substring m from to__)].
   ( ( ( ( (Variablestore__variables__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant from True True True True) ) /\ (Standard__positive___axiom.dynamic_invariant to__ True True True True) ) /\ ( ( [@GP_Pretty_Ada:68380] (from <= to__) ) /\ ( [@GP_Pretty_Ada:68383] (to__ <= (epsilon temp___result_241 : int.
    ( (temp___result_241 = (Variablestore__variables__length.length m)) /\ (Variablestore__variables__length.length__function_guard temp___result_241 m) ))) ) ) ) -> (let result = (Variablestore__variables__substring.substring m from to__) in (
    (if ((Variablestore__variables__substring.substring__function_guard result m from to__)) then (
     ( ( ( [@GP_Pretty_Ada:68796] ((epsilon temp___result_242 : int.
      ( (temp___result_242 = (Variablestore__variables__length.length result)) /\ (Variablestore__variables__length.length__function_guard temp___result_242 result) )) = ((to__ - from) + (1 : int))) ) /\ (Variablestore__variables__mystring___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "get_line" defined at mystring.ads:33 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Variablestore__variables__get_line___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variables__mystring as Variablestore__variables__mystring
 use        Variablestore__variables__mystring___axiom as Variablestore__variables__mystring___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val get_line 
   (m__split_fields : Variablestore__variables__mystring.__split_fields__ref) : unit
  requires {  true }
  ensures {  (Variablestore__variables__mystring___axiom.dynamic_invariant { Variablestore__variables__mystring.__split_fields = m__split_fields.Variablestore__variables__mystring.__split_fields__content } True True True True) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, m__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "get_line__2" defined at a-textio.ads:481, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        Standard__integer as Standard__integer
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val get_line__2 
   (item : Array__Int__Standard__character.map__ref) (item__first : Standard__integer.integer) (item__last : Standard__integer.integer) (last : int__ref) : unit
  requires {  true }
  ensures {  ( ( ( ( [@GP_Pretty_Ada:18606] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:18612] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) ) /\ (if (((Integer.length (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)) > (0 : int))) then (
   ( [@GP_Pretty_Ada:18621] ( (((Standard__integer__rep.to_rep item__first) - (1 : int)) <= last.int__content) /\ (last.int__content <= (Standard__integer__rep.to_rep item__last)) ) )) else (
   ( [@GP_Pretty_Ada:18632] (last.int__content = ((Standard__integer__rep.to_rep item__first) - (1 : int))) ))) ) /\ ( (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)))) /\ (Standard__natural___axiom.dynamic_invariant last.int__content True True True True) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, item, last}

end

(* Module for declaring a program function (and possibly an axiom) for "init" defined at variablestore.ads:17, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Variablestore__init___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database
 use        Variablestore__database___axiom as Variablestore__database___axiom

 val init 
   (d : Variablestore__database.database__ref) : unit
  requires {  true }
  ensures {  (Variablestore__database___axiom.dynamic_invariant d.Variablestore__database.database__content True True True True) }
  writes {d}

end

(* Module for declaring a program function (and possibly an axiom) for "has_variable" defined at variablestore.ads:19, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Variablestore__has_variable___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database
 use        Variablestore__variable as Variablestore__variable
 use        Variablestore__has_variable as Variablestore__has_variable

 val has_variable 
   (d : Variablestore__database.database) (v : Variablestore__variable.variable) : bool
  requires {  true }
  ensures {  ( ( (result = (Variablestore__has_variable.has_variable d v)) /\ (Variablestore__has_variable.has_variable__function_guard result d v) )/\true ) }

end

(* Module for declaring a program function (and possibly an axiom) for "get__2" defined at variablestore.ads:21, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Variablestore__get__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Variablestore__database as Variablestore__database
 use        Variablestore__variable as Variablestore__variable
 use        Variablestore__has_variable as Variablestore__has_variable
 use        Variablestore__get__2 as Variablestore__get__2

 val get__2 
   (d : Variablestore__database.database) (v : Variablestore__variable.variable) : int
  requires {  ( [@GP_Pretty_Ada:69225] ((epsilon temp___result_288 : bool.
   ( (temp___result_288 = (Variablestore__has_variable.has_variable d v)) /\ (Variablestore__has_variable.has_variable__function_guard temp___result_288 d v) )) = True) ) }
  ensures {  ( ( (result = (Variablestore__get__2.get__2 d v)) /\ (Variablestore__get__2.get__2__function_guard result d v) )/\(Standard__integer___axiom.dynamic_invariant result True False True True) ) }
 
 axiom get__2__post_axiom :
  (forall d   : Variablestore__database.database.
  (forall v   : Variablestore__variable.variable [(Variablestore__get__2.get__2 d v)].
   (let result = (Variablestore__get__2.get__2 d v) in (
    (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last result)))
  ))

end

(* Module for declaring a program function (and possibly an axiom) for "length__2" defined at variablestore.ads:37, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Variablestore__length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database
 use        Variablestore__length__2 as Variablestore__length__2
 use        Ada__containers__count_type as Ada__containers__count_type
 use        Ada__containers__count_type___axiom as Ada__containers__count_type___axiom

 val length__2 
   (d : Variablestore__database.database) : int
  requires {  true }
  ensures {  ( ( (result = (Variablestore__length__2.length__2 d)) /\ (Variablestore__length__2.length__2__function_guard result d) )/\(Ada__containers__count_type___axiom.dynamic_invariant result True False True True) ) }
 
 axiom length__2__post_axiom :
  (forall d   : Variablestore__database.database [(Variablestore__length__2.length__2 d)].
   (let result = (Variablestore__length__2.length__2 d) in (
    (Ada__containers__count_type.dynamic_property Ada__containers__count_type.first Ada__containers__count_type.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "put" defined at variablestore.ads:24, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Variablestore__put___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Variablestore__database as Variablestore__database
 use        Variablestore__variable as Variablestore__variable
 use        Variablestore__has_variable as Variablestore__has_variable
 use        Variablestore__length__2 as Variablestore__length__2
 use        Variablestore__database___axiom as Variablestore__database___axiom

 val put 
   (d : Variablestore__database.database__ref) (v : Variablestore__variable.variable) (value : int) : unit
  requires {  ( [@GP_Pretty_Ada:69250] ( ((epsilon temp___result_290 : int.
   ( (temp___result_290 = (Variablestore__length__2.length__2 d.Variablestore__database.database__content)) /\ (Variablestore__length__2.length__2__function_guard temp___result_290 d.Variablestore__database.database__content) )) < (1000 : int)) \/ ((epsilon temp___result_291 : bool.
   ( (temp___result_291 = (Variablestore__has_variable.has_variable d.Variablestore__database.database__content v)) /\ (Variablestore__has_variable.has_variable__function_guard temp___result_291 d.Variablestore__database.database__content v) )) = True) ) ) }
  ensures {  (Variablestore__database___axiom.dynamic_invariant d.Variablestore__database.database__content True True True True) }
  writes {d}

end

(* Module for declaring a program function (and possibly an axiom) for "remove" defined at variablestore.ads:27, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Variablestore__remove___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database
 use        Variablestore__variable as Variablestore__variable
 use        Variablestore__has_variable as Variablestore__has_variable
 use        Variablestore__database___axiom as Variablestore__database___axiom

 val remove 
   (d : Variablestore__database.database__ref) (v : Variablestore__variable.variable) : unit
  requires {  ( [@GP_Pretty_Ada:69269] ((epsilon temp___result_293 : bool.
   ( (temp___result_293 = (Variablestore__has_variable.has_variable d.Variablestore__database.database__content v)) /\ (Variablestore__has_variable.has_variable__function_guard temp___result_293 d.Variablestore__database.database__content v) )) = True) ) }
  ensures {  (Variablestore__database___axiom.dynamic_invariant d.Variablestore__database.database__content True True True True) }
  writes {d}

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at variablestore.ads:30, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Variablestore__from_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Variablestore__variable as Variablestore__variable
 use        Variablestore__from_string as Variablestore__from_string
 use        Variablestore__variable___axiom as Variablestore__variable___axiom

 val from_string 
   (s : Standard__string.string) : Variablestore__variable.variable
  requires {  ( [@GP_Pretty_Ada:69288] ((Standard__string.length s) <= (1024 : int)) ) }
  ensures {  ( ( (result = (Variablestore__from_string.from_string s)) /\ (Variablestore__from_string.from_string__function_guard result s) )/\(Variablestore__variable___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "to_string" defined at variablestore.ads:32, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Variablestore__to_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Variablestore__variable as Variablestore__variable
 use        Variablestore__to_string as Variablestore__to_string

 val to_string 
   (v : Variablestore__variable.variable) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Variablestore__to_string.to_string v)) /\ (Variablestore__to_string.to_string__function_guard result v) )/\(Standard__string___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "less" defined at variablestore.ads:34, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Variablestore__less___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variable as Variablestore__variable
 use        Variablestore__less as Variablestore__less

 val less 
   (v1 : Variablestore__variable.variable) (v2 : Variablestore__variable.variable) : bool
  requires {  true }
  ensures {  ( ( (result = (Variablestore__less.less v1 v2)) /\ (Variablestore__less.less__function_guard result v1 v2) )/\true ) }

end

(* Module for declaring a program function (and possibly an axiom) for "equal" defined at variablestore.ads:35, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Variablestore__equal___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variable as Variablestore__variable
 use        Variablestore__equal as Variablestore__equal

 val equal 
   (v1 : Variablestore__variable.variable) (v2 : Variablestore__variable.variable) : bool
  requires {  true }
  ensures {  ( ( (result = (Variablestore__equal.equal v1 v2)) /\ (Variablestore__equal.equal__function_guard result v1 v2) )/\true ) }

end

(* Module for declaring a program function (and possibly an axiom) for "print" defined at variablestore.ads:39, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Variablestore__print___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database

 val print 
   (d : Variablestore__database.database) : unit
  requires {  true }
  ensures {  true }

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "variablestore" defined at variablestore.ads:7, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Variablestore__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Variablestore__max_variable_length as Variablestore__max_variable_length
 use        Variablestore__max_entries as Variablestore__max_entries
 use        Ada__containers__count_type___axiom as Ada__containers__count_type___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Variablestore__max_variable_length___axiom as Variablestore__max_variable_length___axiom
 use        Variablestore__max_entries___axiom as Variablestore__max_entries___axiom
 use        Ada__containers__count_type___axiom as Ada__containers__count_type___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom

 let def [#"variablestore.ads" 7 0 0][@GP_Subp:variablestore.ads:7] 
   (__void_param : unit)
  requires { [#"variablestore.ads" 7 0 0] true }
   = [@vc:divergent]
  ( [#"variablestore.ads" 7 0 0] assume { [#"variablestore.ads" 7 0 0] ( ((Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) = (0 : int)) /\ ((Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) = (0 : int)) ) };
  ();
  ([#"variablestore.ads" 7 0 0] ());
  ([#"variablestore.ads" 8 0 0] ( [#"variablestore.ads" 8 0 0] begin ensures {true} let _ = (let _ = (1024 : int) in (
   ()))
   in () end ;
  [#"variablestore.ads" 8 0 0] assume { [#"variablestore.ads" 8 0 0] (Standard__natural___axiom.dynamic_invariant Variablestore__max_variable_length.max_variable_length True False True True) } ));
  ([#"variablestore.ads" 9 0 0] ( [#"variablestore.ads" 9 0 0] begin ensures {true} let _ = (let _ = (1000 : int) in (
   ()))
   in () end ;
  [#"variablestore.ads" 9 0 0] assume { [#"variablestore.ads" 9 0 0] (Ada__containers__count_type___axiom.dynamic_invariant Variablestore__max_entries.max_entries True False True True) } ));
  ([#"variablestore.ads" 11 0 0] ());
  ([#"mystring.adb" 3 0 0] ());
  ([#"variablestore.ads" 11 0 0] ());
  ([#"variablestore.ads" 13 0 0] ());
  ([#"variablestore.ads" 13 0 0] ());
  ([#"variablestore.ads" 15 0 0] ());
  ([#"variablestore.ads" 17 0 0] ());
  ([#"variablestore.ads" 19 0 0] ());
  ([#"variablestore.ads" 21 0 0] ());
  ([#"variablestore.ads" 22 0 0] ());
  ([#"variablestore.ads" 24 0 0] ());
  ([#"variablestore.ads" 25 0 0] ());
  ([#"variablestore.ads" 27 0 0] ());
  ([#"variablestore.ads" 28 0 0] ());
  ([#"variablestore.ads" 30 0 0] ());
  ([#"variablestore.ads" 31 0 0] ());
  ([#"variablestore.ads" 32 0 0] ());
  ([#"variablestore.ads" 34 0 0] ());
  ([#"variablestore.ads" 35 0 0] ());
  ([#"variablestore.ads" 37 0 0] ());
  ([#"variablestore.ads" 39 0 0] ()) )
end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "variables" defined at variablestore.ads:11, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Variablestore__variables__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Variablestore__variables__max_mystring_length as Variablestore__variables__max_mystring_length
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Variablestore__variables__max_mystring_length___axiom as Variablestore__variables__max_mystring_length___axiom

 let def [#"variablestore.ads" 11 0 0][@GP_Subp:variablestore.ads:11] 
   (__void_param : unit)
  requires { [#"variablestore.ads" 11 0 0] true }
   = [@vc:divergent]
  ( ();
  ([#"mystring.ads" 5 0 0] ());
  ([#"variablestore.ads" 11 0 0] ( [#"variablestore.ads" 11 0 0] begin ensures {true} let _ = (let _ = (1024 : int) in (
   ()))
   in () end ;
  [#"variablestore.ads" 11 0 0] assume { [#"variablestore.ads" 11 0 0] (Standard__positive___axiom.dynamic_invariant Variablestore__variables__max_mystring_length.max_mystring_length True False True True) } ));
  ([#"variablestore.ads" 11 0 0] ());
  ([#"mystring.ads" 1 0 0] ());
  ([#"mystring.ads" 6 0 0] ());
  ([#"mystring.ads" 8 0 0] ());
  ([#"mystring.ads" 9 0 0] ());
  ([#"mystring.ads" 12 0 0] ());
  ([#"mystring.ads" 14 0 0] ());
  ([#"mystring.ads" 13 0 0] ());
  ([#"mystring.ads" 16 0 0] ());
  ([#"mystring.ads" 18 0 0] ());
  ([#"mystring.ads" 19 0 0] ());
  ([#"mystring.ads" 23 0 0] ());
  ([#"mystring.ads" 24 0 0] ());
  ([#"mystring.ads" 26 0 0] ());
  ([#"mystring.ads" 28 0 0] ());
  ([#"mystring.ads" 27 0 0] ());
  ([#"mystring.ads" 30 0 0] ());
  ([#"mystring.ads" 31 0 0] ());
  ([#"mystring.ads" 33 0 0] ());
  ();
  ([#"mystring.ads" 36 0 0] ());
  ([#"mystring.ads" 37 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 42 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ([#"mystring.ads" 45 0 0] ());
  ();
  ([#"mystring.adb" 5 0 0] ());
  ([#"mystring.adb" 12 0 0] ());
  ([#"mystring.adb" 28 0 0] ());
  ([#"mystring.adb" 52 0 0] ());
  ([#"mystring.adb" 71 0 0] ());
  ([#"mystring.adb" 83 0 0] ());
  ();
  ( [@GP_Sloc:mystring.adb:89:1:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 89 0 0] ()) ) )
end

(* Module for checking DIC of default value and absence of runtime errors in the private part of "mystring" defined at mystring.ads:6 instantiated at variablestore.ads:11, created in Gnat2Why.Types.Generate_VCs_For_Type *)
module Variablestore__variables__mystring__default_checks
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__variables__mystring as Variablestore__variables__mystring
 use        Standard__character___axiom as Standard__character___axiom
 use        Variablestore__variables__mystringstr___axiom as Variablestore__variables__mystringstr___axiom
 use        Variablestore__variables__mystring___axiom as Variablestore__variables__mystring___axiom
 use        Variablestore__variables__mystring__T13s___axiom as Variablestore__variables__mystring__T13s___axiom

 let def [@GP_Subp:mystring.ads:6] 
   (__void_param : unit)
  requires {  true }
  ensures {  true }
   = [@vc:divergent]
  (let temp___303 [@mlw:proxy_symbol] [@introduced] =  (val _f : Variablestore__variables__mystring.mystring
  ensures { true} 
  in _f) in (
   ( () )))

end

(* Module for checking contracts and absence of run-time errors in subprogram "length" defined at mystring.ads:23 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Variablestore__variables__length__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Variablestore__variables__mystring as Variablestore__variables__mystring
 use        Variablestore__variables__length__m as Variablestore__variables__length__m
 use        Variablestore__variables__mystring___axiom as Variablestore__variables__mystring___axiom
 use        Variablestore__variables__mystring__T13s as Variablestore__variables__mystring__T13s
 use        Variablestore__variables__mystring__T13s__rep as Variablestore__variables__mystring__T13s__rep
 use        Standard__character___axiom as Standard__character___axiom
 use        Variablestore__variables__length__m___axiom as Variablestore__variables__length__m___axiom
 use        Variablestore__variables__mystringstr___axiom as Variablestore__variables__mystringstr___axiom
 use        Variablestore__variables__mystring___axiom as Variablestore__variables__mystring___axiom
 use        Variablestore__variables__mystring__T13s___axiom as Variablestore__variables__mystring__T13s___axiom

 val variablestore__variables__length__result [@model_trace:68359@result] [@model_projected] [@name:Length]  : int__ref 
 
 let def [#"mystring.ads" 23 0 0][@GP_Subp:mystring.ads:23] 
   (__void_param : unit)
  requires { [#"mystring.ads" 23 0 0] true }
  ensures { [#"mystring.ads" 23 0 0] ([#"mystring.ads" 24 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@comment:     Post => Length'Result <= Max_MyString_Length;              ^ mystring.ads:24:14:instantiated:variablestore.ads:11:4:VC_POSTCONDITION] [@model_vc_post] [@GP_Id:0] [@GP_Sloc:mystring.ads:24:14:instantiated:variablestore.ads:11:4] ( [@GP_Pretty_Ada:68755] [@GP_Sloc:mystring.ads:24:14:instantiated:variablestore.ads:11:4] (variablestore__variables__length__result.int__content <= (1024 : int)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:23 instantiated at variablestore.ads:11 *)
  ;
   assume {  (Variablestore__variables__mystring___axiom.dynamic_invariant Variablestore__variables__length__m.m True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:23 instantiated at variablestore.ads:11 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:23 instantiated at variablestore.ads:11 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:23 instantiated at variablestore.ads:11 *)
  ;
   try
   ( ();
   ( [@GP_Sloc:mystring.ads:43:8:instantiated:variablestore.ads:11:4] ([#"mystring.ads" 43 0 0] ( [#"mystring.ads" 43 0 0] (variablestore__variables__length__result.int__content <- ( (Variablestore__variables__mystring__T13s__rep.to_rep(Variablestore__variables__length__m.m.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length)) ));
   [#"mystring.ads" 43 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (variablestore__variables__length__result.int__content <= (1024 : int)) in (
   ()))
   in () end ;
  variablestore__variables__length__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "to_string" defined at mystring.ads:8 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Variablestore__variables__to_string__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Variablestore__variables__mystring as Variablestore__variables__mystring
 use        Variablestore__variables__to_string__m as Variablestore__variables__to_string__m
 use        Variablestore__variables__length as Variablestore__variables__length
 use        Variablestore__variables__length___axiom as Variablestore__variables__length___axiom
 use        Variablestore__variables__mystring___axiom as Variablestore__variables__mystring___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Variablestore__variables__to_string__result as Variablestore__variables__to_string__result
 use        Variablestore__variables__mystring__T13s as Variablestore__variables__mystring__T13s
 use        Variablestore__variables__mystring__T13s__rep as Variablestore__variables__mystring__T13s__rep
 use        Variablestore__variables__TmystringstrD1 as Variablestore__variables__TmystringstrD1
 use        Variablestore__variables__to_string__TresultS as Variablestore__variables__to_string__TresultS
 use        Variablestore__variables__to_string__T272s as Variablestore__variables__to_string__T272s
 use        Variablestore__variables__to_string__TresultS___axiom as Variablestore__variables__to_string__TresultS___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Variablestore__variables__to_string__m___axiom as Variablestore__variables__to_string__m___axiom
 use        Variablestore__variables__length___axiom as Variablestore__variables__length___axiom
 use        Variablestore__variables__mystringstr___axiom as Variablestore__variables__mystringstr___axiom
 use        Variablestore__variables__mystring___axiom as Variablestore__variables__mystring___axiom
 use        Variablestore__variables__TmystringstrD1___axiom as Variablestore__variables__TmystringstrD1___axiom
 use        Variablestore__variables__mystring__T13s___axiom as Variablestore__variables__mystring__T13s___axiom
 use        Variablestore__variables__to_string__result___axiom as Variablestore__variables__to_string__result___axiom
 use        Variablestore__variables__to_string__TresultS___axiom as Variablestore__variables__to_string__TresultS___axiom
 use        Variablestore__variables__to_string__T272s___axiom as Variablestore__variables__to_string__T272s___axiom

 val variablestore__variables__to_string__result [@name:To_String] [@model_trace:68208@result] [@model_projected]  : Standard__string.string__ref 
 
 let def [#"mystring.ads" 8 0 0][@GP_Subp:mystring.ads:8] 
   (__void_param : unit)
  requires { [#"mystring.ads" 8 0 0] true }
  ensures { [#"mystring.ads" 8 0 0] ([#"mystring.ads" 9 0 0] ( [@comment:     Post => To_String'Result'Length = Length(M) and              ^ mystring.ads:9:14:instantiated:variablestore.ads:11:4:VC_POSTCONDITION] [@GP_Reason:VC_POSTCONDITION] [@GP_Sloc:mystring.ads:9:14:instantiated:variablestore.ads:11:4] [@model_vc_post] [@GP_Shape:pragargs__and] [@GP_Id:7] ( ( ( [@GP_Sloc:mystring.ads:9:14:instantiated:variablestore.ads:11:4] [@GP_Pretty_Ada:68188] ((Standard__string.length variablestore__variables__to_string__result.Standard__string.string__content) = (epsilon temp___result_315 : int.
   ( (temp___result_315 = (Variablestore__variables__length.length Variablestore__variables__to_string__m.m)) /\ (Variablestore__variables__length.length__function_guard temp___result_315 Variablestore__variables__to_string__m.m) ))) ) /\ ( [@GP_Sloc:mystring.ads:10:14:instantiated:variablestore.ads:11:4] [@GP_Pretty_Ada:68195] ((Standard__string.first variablestore__variables__to_string__result.Standard__string.string__content) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:68200] [@GP_Sloc:mystring.ads:10:45:instantiated:variablestore.ads:11:4] ((Standard__string.last variablestore__variables__to_string__result.Standard__string.string__content) = (epsilon temp___result_316 : int.
   ( (temp___result_316 = (Variablestore__variables__length.length Variablestore__variables__to_string__m.m)) /\ (Variablestore__variables__length.length__function_guard temp___result_316 Variablestore__variables__to_string__m.m) ))) ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:8 instantiated at variablestore.ads:11 *)
  ;
   assume {  (Variablestore__variables__mystring___axiom.dynamic_invariant Variablestore__variables__to_string__m.m True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:8 instantiated at variablestore.ads:11 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:8 instantiated at variablestore.ads:11 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:8 instantiated at variablestore.ads:11 *)
  ;
   try
   ( ();
   ([#"mystring.adb" 6 0 0] ( [#"mystring.adb" 6 0 0] begin ensures {true} let _ = (let _ = (Variablestore__variables__mystring__T13s__rep.to_rep(Variablestore__variables__to_string__m.m.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length)) in (
    ()))
    in () end ;
   ([#"mystring.adb" 6 0 0] [#"mystring.adb" 6 0 0] (val _f : unit
   requires {( [@comment:      Result : String(1..M.Length);       ^ mystring.adb:6:7:instantiated:variablestore.ads:11:4:VC_RANGE_CHECK] [@vc:annotation] [@GP_Sloc:mystring.adb:6:7:instantiated:variablestore.ads:11:4] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:1] [#"mystring.adb" 6 0 0] ( ((1 : int) <= (Variablestore__variables__mystring__T13s__rep.to_rep Variablestore__variables__to_string__m.m.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length)) -> ( ((1 : int) >= Standard__positive.first) /\ ((Variablestore__variables__mystring__T13s__rep.to_rep Variablestore__variables__to_string__m.m.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length) <= Standard__positive.last) ) ) )} 
   ensures {[#"mystring.adb" 6 0 0] true} 
   in _f)) ));
   ([#"mystring.adb" 6 0 0] ( [#"mystring.adb" 6 0 0] assume { [#"mystring.adb" 6 0 0] (Variablestore__variables__to_string__TresultS___axiom.default_initial_assumption (Variablestore__variables__to_string__TresultS.of_array Variablestore__variables__to_string__result.result__.Array__Int__Standard__character.map__content (Standard__integer__rep.to_rep Variablestore__variables__to_string__result.result____first) (Standard__integer__rep.to_rep Variablestore__variables__to_string__result.result____last)) False) };
   [#"mystring.adb" 6 0 0] assume { [#"mystring.adb" 6 0 0] (if (False) then (
    true) else (
    ( (Variablestore__variables__to_string__TresultS.dynamic_property (1 : int) (Variablestore__variables__mystring__T13s__rep.to_rep Variablestore__variables__to_string__m.m.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length) (Standard__integer__rep.to_rep Variablestore__variables__to_string__result.result____first) (Standard__integer__rep.to_rep Variablestore__variables__to_string__result.result____last)) /\ ( ((Standard__integer__rep.to_rep Variablestore__variables__to_string__result.result____first) = (1 : int)) /\ ((Standard__integer__rep.to_rep Variablestore__variables__to_string__result.result____last) = (Variablestore__variables__mystring__T13s__rep.to_rep Variablestore__variables__to_string__m.m.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length)) ) ))) } ));
   ();
   ( [@GP_Sloc:mystring.adb:8:7:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 8 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:8:14:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 8 0 0] [#"mystring.adb" 8 0 0] (Variablestore__variables__to_string__result.result__.Array__Int__Standard__character.map__content <- ( (Variablestore__variables__to_string__TresultS.to_array (let temp___312 [@mlw:proxy_symbol] [@introduced] = (let temp___311 [@mlw:proxy_symbol] [@introduced] = (let temp___310 [@mlw:proxy_symbol] [@introduced] = (let temp___308 [@mlw:proxy_symbol] [@introduced] = (Variablestore__variables__mystring__T13s__rep.to_rep(Variablestore__variables__to_string__m.m.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length)) in (
   (let temp___307 [@mlw:proxy_symbol] [@introduced] = (1 : int) in (
   (let temp___309 [@mlw:proxy_symbol] [@introduced] = Variablestore__variables__to_string__m.m.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str in (
    (Variablestore__variables__to_string__T272s.of_array(( [#"mystring.adb" 8 0 0] assert { [#"mystring.adb" 8 0 0] ([#"mystring.adb" 8 0 0] ( [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:result_assign__typeconv__slice] [@GP_Sloc:mystring.adb:8:25:instantiated:variablestore.ads:11:4] [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                         ^ mystring.adb:8:25:instantiated:variablestore.ads:11:4:VC_RANGE_CHECK] [@GP_Id:2] ( (temp___307 <= temp___308) -> ( ( (Variablestore__variables__TmystringstrD1.first <= temp___307) /\ (temp___307 <= Variablestore__variables__TmystringstrD1.last) ) /\ ( (Variablestore__variables__TmystringstrD1.first <= temp___308) /\ (temp___308 <= Variablestore__variables__TmystringstrD1.last) ) ) ) )) };
    temp___309 )) (temp___307) (temp___308))))
   ))
   ))
    in (
    (  assert {  ([#"mystring.adb" 8 0 0] ( [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:result_assign__typeconv__slice] [@GP_Sloc:mystring.adb:8:25:instantiated:variablestore.ads:11:4] [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                         ^ mystring.adb:8:25:instantiated:variablestore.ads:11:4:VC_RANGE_CHECK] [@GP_Id:3] (Standard__string.dynamic_property(Standard__positive.first) (Standard__positive.last) ((Variablestore__variables__to_string__T272s.first(temp___310))) ((Variablestore__variables__to_string__T272s.last(temp___310)))) )) };
    (Standard__string.of_array((Variablestore__variables__to_string__T272s.to_array(temp___310))) ((Variablestore__variables__to_string__T272s.first(temp___310))) ((Variablestore__variables__to_string__T272s.last(temp___310)))) )))
    in (
    (  assert {  ([#"mystring.adb" 8 0 0] ( [@GP_Sloc:mystring.adb:8:17:instantiated:variablestore.ads:11:4] [@vc:annotation] [@GP_Shape:result_assign__typeconv] [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                 ^ mystring.adb:8:17:instantiated:variablestore.ads:11:4:VC_LENGTH_CHECK] [@GP_Id:4] [@GP_Reason:VC_LENGTH_CHECK] ( true /\ (if (((Standard__string.first temp___311) <= (Standard__string.last temp___311))) then (
     ( ((1 : int) <= (Variablestore__variables__mystring__T13s__rep.to_rep Variablestore__variables__to_string__m.m.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length)) /\ (((Standard__string.last temp___311) - (Standard__string.first temp___311)) = ((Variablestore__variables__mystring__T13s__rep.to_rep Variablestore__variables__to_string__m.m.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length) - (1 : int))) )) else (
     ((Variablestore__variables__mystring__T13s__rep.to_rep Variablestore__variables__to_string__m.m.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length) < (1 : int)))) ) )) };
    (Variablestore__variables__to_string__TresultS.of_array((Array__Int__Standard__character.slide((Standard__string.to_array(temp___311))) ((Standard__string.first(temp___311))) ((1 : int)))) ((1 : int)) ((Variablestore__variables__mystring__T13s__rep.to_rep Variablestore__variables__to_string__m.m.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length))) )))
    in (
    (  assert {  ([#"mystring.adb" 8 0 0] ( [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;              ^ mystring.adb:8:14:instantiated:variablestore.ads:11:4:VC_LENGTH_CHECK] [@vc:annotation] [@GP_Shape:result_assign] [@GP_Sloc:mystring.adb:8:14:instantiated:variablestore.ads:11:4] [@GP_Id:5] [@GP_Reason:VC_LENGTH_CHECK] ( true /\ (if (((Variablestore__variables__to_string__TresultS.first temp___312) <= (Variablestore__variables__to_string__TresultS.last temp___312))) then (
     ( ((Standard__integer__rep.to_rep Variablestore__variables__to_string__result.result____first) <= (Standard__integer__rep.to_rep Variablestore__variables__to_string__result.result____last)) /\ (((Variablestore__variables__to_string__TresultS.last temp___312) - (Variablestore__variables__to_string__TresultS.first temp___312)) = ((Standard__integer__rep.to_rep Variablestore__variables__to_string__result.result____last) - (Standard__integer__rep.to_rep Variablestore__variables__to_string__result.result____first))) )) else (
     ((Standard__integer__rep.to_rep Variablestore__variables__to_string__result.result____last) < (Standard__integer__rep.to_rep Variablestore__variables__to_string__result.result____first)))) ) )) };
    temp___312 )))
   ) ))) );
   ( [@GP_Sloc:mystring.adb:9:14:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 9 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:9:7:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 9 0 0] ( [#"mystring.adb" 9 0 0] (variablestore__variables__to_string__result.Standard__string.string__content <- ( (Standard__string.of_array(Variablestore__variables__to_string__result.result__.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Variablestore__variables__to_string__result.result____first))) ((Standard__integer__rep.to_rep(Variablestore__variables__to_string__result.result____last)))) ));
   [#"mystring.adb" 9 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb((([#"mystring.ads" 9 0 0] ( [@GP_Shape:pragargs__and__and__cmp__typeconv__length_ref] [@GP_Sloc:mystring.ads:9:30:instantiated:variablestore.ads:11:4] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@comment:     Post => To_String'Result'Length = Length(M) and                              ^ mystring.ads:9:30:instantiated:variablestore.ads:11:4:VC_RANGE_CHECK] [@GP_Id:6] (Standard__integer.range_check_(( [#"mystring.ads" 9 0 0] begin ensures {true} let _ = (let _ = variablestore__variables__to_string__result.Standard__string.string__content in (
   ()))
   in () end ;
  (Standard__string.length(variablestore__variables__to_string__result.Standard__string.string__content)) ))) )) = (Variablestore__variables__length___axiom.length(Variablestore__variables__to_string__m.m)))) (((  begin ensures {true} let _ = (let _ = variablestore__variables__to_string__result.Standard__string.string__content in (
   ()))
   in () end ;
  (Standard__string.first(variablestore__variables__to_string__result.Standard__string.string__content)) ) = (1 : int))))) (((  begin ensures {true} let _ = (let _ = variablestore__variables__to_string__result.Standard__string.string__content in (
   ()))
   in () end ;
  (Standard__string.last(variablestore__variables__to_string__result.Standard__string.string__content)) ) = (Variablestore__variables__length___axiom.length(Variablestore__variables__to_string__m.m))))) in (
   ()))
   in () end ;
  variablestore__variables__to_string__result.Standard__string.string__content )
end

(* Module for defining the value of the aggregate at mystring.adb:13 instantiated at variablestore.ads:11, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_317___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_317 as Temp_____aggregate_def_317
 use        Array__Int__Standard__character as Array__Int__Standard__character

 axiom def_axiom :
  (forall temp___319   : int.
   (let temp___318 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_317.temp_____aggregate_def_317 temp___319) in (
    (if ((Standard__character___axiom.dynamic_invariant temp___319 True True True True)) then (
     (forall temp___320   : int.
      ((Standard__character__rep.to_rep (Array__Int__Standard__character.get temp___318 temp___320)) = temp___319))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "from_string" defined at mystring.ads:12 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Variablestore__variables__from_string__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Variablestore__variables__mystring as Variablestore__variables__mystring
 use        Variablestore__variables__length as Variablestore__variables__length
 use        Variablestore__variables__length___axiom as Variablestore__variables__length___axiom
 use        Variablestore__variables__from_string__s as Variablestore__variables__from_string__s
 use        Variablestore__variables__mystring___axiom as Variablestore__variables__mystring___axiom
 use        Variablestore__variables__from_string__m as Variablestore__variables__from_string__m
 use        Variablestore__variables__from_string__j as Variablestore__variables__from_string__j
 use        Variablestore__variables__from_string__L_1__i as Variablestore__variables__from_string__L_1__i
 use        Variablestore__variables__mystring__T13s as Variablestore__variables__mystring__T13s
 use        Variablestore__variables__mystring__T13s__rep as Variablestore__variables__mystring__T13s__rep
 use        Variablestore__variables__TmystringstrD1 as Variablestore__variables__TmystringstrD1
 use        Variablestore__variables__from_string__L_1 as Variablestore__variables__from_string__L_1
 use        Variablestore__variables__from_string__L_1__T277s as Variablestore__variables__from_string__L_1__T277s
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_317 as Temp_____aggregate_def_317
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Variablestore__variables__from_string__s___axiom as Variablestore__variables__from_string__s___axiom
 use        Variablestore__variables__length___axiom as Variablestore__variables__length___axiom
 use        Variablestore__variables__mystringstr___axiom as Variablestore__variables__mystringstr___axiom
 use        Variablestore__variables__mystring___axiom as Variablestore__variables__mystring___axiom
 use        Variablestore__variables__TmystringstrD1___axiom as Variablestore__variables__TmystringstrD1___axiom
 use        Variablestore__variables__mystring__T13s___axiom as Variablestore__variables__mystring__T13s___axiom
 use        Variablestore__variables__from_string__m___axiom as Variablestore__variables__from_string__m___axiom
 use        Variablestore__variables__from_string__j___axiom as Variablestore__variables__from_string__j___axiom
 use        Variablestore__variables__from_string__L_1___axiom as Variablestore__variables__from_string__L_1___axiom
 use        Variablestore__variables__from_string__L_1__i___axiom as Variablestore__variables__from_string__L_1__i___axiom
 use        Temp_____aggregate_def_317___axiom as Temp_____aggregate_def_317___axiom
 use        Variablestore__variables__from_string__L_1__T277s___axiom as Variablestore__variables__from_string__L_1__T277s___axiom

 val variablestore__variables__from_string__result [@name:From_String] [@model_projected] [@model_trace:68242@result]  : Variablestore__variables__mystring.mystring__ref 
 
 let def [#"mystring.ads" 12 0 0][@GP_Subp:mystring.ads:12] 
   (__void_param : unit)
  requires { [#"mystring.ads" 12 0 0] true }
  ensures { [#"mystring.ads" 12 0 0] ([#"mystring.ads" 14 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Sloc:mystring.ads:14:15:instantiated:variablestore.ads:11:4] [@GP_Id:18] [@GP_Shape:pragargs__cmp] [@model_vc_post] [@comment:     Post => (Length(From_String'Result) = S'Length);               ^ mystring.ads:14:15:instantiated:variablestore.ads:11:4:VC_POSTCONDITION] ( [@GP_Sloc:mystring.ads:14:15:instantiated:variablestore.ads:11:4] [@GP_Pretty_Ada:68687] ((epsilon temp___result_335 : int.
   ( (temp___result_335 = (Variablestore__variables__length.length variablestore__variables__from_string__result.Variablestore__variables__mystring.mystring__content)) /\ (Variablestore__variables__length.length__function_guard temp___result_335 variablestore__variables__from_string__result.Variablestore__variables__mystring.mystring__content) )) = (Standard__string.length Variablestore__variables__from_string__s.s)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:12 instantiated at variablestore.ads:11 *)
  ;
   assume {  (Standard__string___axiom.dynamic_invariant Variablestore__variables__from_string__s.s True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:12 instantiated at variablestore.ads:11 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:12 instantiated at variablestore.ads:11 *)
  ;
   begin ensures {true} let _ = (let _ = (([#"mystring.ads" 13 0 0] ( [@GP_Id:17] [@GP_Sloc:mystring.ads:13:15:instantiated:variablestore.ads:11:4] [@vc:annotation] [@GP_Shape:pragargs__cmp__typeconv__length_ref] [@GP_Reason:VC_RANGE_CHECK] [@comment:     Pre => (S'Length <= Max_MyString_Length),               ^ mystring.ads:13:15:instantiated:variablestore.ads:11:4:VC_RANGE_CHECK] (Standard__integer.range_check_(( [#"mystring.ads" 13 0 0] begin ensures {true} let _ = (let _ = Variablestore__variables__from_string__s.s in (
   ()))
   in () end ;
  (Standard__string.length(Variablestore__variables__from_string__s.s)) ))) )) <= (1024 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:12 instantiated at variablestore.ads:11 *)
  ;
   assume {  ( [@GP_Pretty_Ada:68673] ((Standard__string.length Variablestore__variables__from_string__s.s) <= (1024 : int)) ) };
   try
   ( ();
   ([#"mystring.adb" 12 0 0] ());
   ([#"mystring.adb" 13 0 0] ( (let variablestore__variables__from_string__m__assume = { Variablestore__variables__mystring.__split_fields = { Variablestore__variables__mystring.rec__variablestore__variables__mystring__length = ( 0 : Variablestore__variables__mystring__T13s.t13s ); Variablestore__variables__mystring.rec__variablestore__variables__mystring__str = (Temp_____aggregate_def_317.temp_____aggregate_def_317((32 : int))) } } in (
    [#"mystring.adb" 13 0 0] (Variablestore__variables__from_string__m.m__split_fields.Variablestore__variables__mystring.__split_fields__content <- ( variablestore__variables__from_string__m__assume.Variablestore__variables__mystring.__split_fields ))))
   ;
   [#"mystring.adb" 13 0 0] assume { [#"mystring.adb" 13 0 0] (Variablestore__variables__mystring___axiom.dynamic_invariant { Variablestore__variables__mystring.__split_fields = Variablestore__variables__from_string__m.m__split_fields.Variablestore__variables__mystring.__split_fields__content } True False True True) } ));
   ([#"mystring.adb" 14 0 0] ());
   ([#"mystring.adb" 14 0 0] ( [#"mystring.adb" 14 0 0] (Variablestore__variables__from_string__j.j.int__content <- ( (1 : int) ));
   [#"mystring.adb" 14 0 0] assume { [#"mystring.adb" 14 0 0] (Standard__integer___axiom.dynamic_invariant Variablestore__variables__from_string__j.j.int__content True False True True) } ));
   ([#"mystring.adb" 20 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:16:7:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 16 0 0] (if (( ([#"mystring.adb" 16 0 0] [#"mystring.adb" 16 0 0] (([@branch_id=110957] Main.spark__branch).bool__content <- ( (([#"mystring.adb" 16 0 0] ( [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:if__cmp__typeconv__length_ref] [@comment:      if S'Length > Max_MyString_Length then           ^ mystring.adb:16:11:instantiated:variablestore.ads:11:4:VC_RANGE_CHECK] [@GP_Sloc:mystring.adb:16:11:instantiated:variablestore.ads:11:4] [@GP_Id:9] (Standard__integer.range_check_(( [#"mystring.adb" 16 0 0] begin ensures {true} let _ = (let _ = Variablestore__variables__from_string__s.s in (
    ()))
    in () end ;
   (Standard__string.length(Variablestore__variables__from_string__s.s)) ))) )) > (1024 : int)) )));
   ( [@branch_id=110957] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:mystring.adb:17:10:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 17 0 0] ([#"mystring.adb" 17 0 0] ( [@comment:         raise Constraint_Error;          ^ mystring.adb:17:10:instantiated:variablestore.ads:11:4:VC_RAISE] [@GP_Reason:VC_RAISE] [@vc:annotation] [@GP_Shape:if__raise_constraint_error] [@GP_Sloc:mystring.adb:17:10:instantiated:variablestore.ads:11:4] [@GP_Id:8] absurd ))) ) )) else (
    ()))) );
   ( [@GP_Sloc:mystring.adb:19:7:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 19 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:19:16:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 19 0 0] (let temp___322 [@mlw:proxy_symbol] [@introduced] = (let temp___321 [@mlw:proxy_symbol] [@introduced] = { Variablestore__variables__mystring.__split_fields = Variablestore__variables__from_string__m.m__split_fields.Variablestore__variables__mystring.__split_fields__content } in (
    ( [#"mystring.adb" 19 0 0] begin ensures {true} let _ = (let _ = temp___321.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length in (
     ()))
     in () end ;
    { ( temp___321 ) with Variablestore__variables__mystring.__split_fields = { ( temp___321.Variablestore__variables__mystring.__split_fields ) with Variablestore__variables__mystring.rec__variablestore__variables__mystring__length = (Variablestore__variables__mystring__T13s__rep.of_rep(([#"mystring.adb" 19 0 0] ( [@GP_Id:10] [@vc:annotation] [@GP_Sloc:mystring.adb:19:20:instantiated:variablestore.ads:11:4] [@comment:      M.Length := S'Length;                    ^ mystring.adb:19:20:instantiated:variablestore.ads:11:4:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:m_assign__typeconv__length_ref] (Variablestore__variables__mystring__T13s.range_check_(( [#"mystring.adb" 19 0 0] begin ensures {true} let _ = (let _ = Variablestore__variables__from_string__s.s in (
     ()))
     in () end ;
    (Standard__string.length(Variablestore__variables__from_string__s.s)) ))) )))) } } )))
    in (
     (Variablestore__variables__from_string__m.m__split_fields.Variablestore__variables__mystring.__split_fields__content <- ( temp___322.Variablestore__variables__mystring.__split_fields ))))
   ) );
   ( [@GP_Sloc:mystring.adb:20:24:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 20 0 0] (let temp___323 [@mlw:proxy_symbol] [@introduced] = ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = Variablestore__variables__from_string__s.s in (
    ()))
    in () end ;
   (Standard__string.first(Variablestore__variables__from_string__s.s)) ) in (
   (let temp___324 [@mlw:proxy_symbol] [@introduced] = ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = Variablestore__variables__from_string__s.s in (
    ()))
    in () end ;
   (Standard__string.last(Variablestore__variables__from_string__s.s)) ) in (
    ( [#"mystring.adb" 20 0 0] (Variablestore__variables__from_string__L_1__i.i.int__content <- ( temp___323 ));
    () (* Translation of an Ada loop from mystring.adb:20 instantiated at variablestore.ads:11 *)
    ;
    (if ((Boolean.andb((temp___323 <= Variablestore__variables__from_string__L_1__i.i.int__content)) ((Variablestore__variables__from_string__L_1__i.i.int__content <= temp___324)))) then (
     [#"mystring.adb" 20 0 0] try
      ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = Variablestore__variables__from_string__L_1__i.i.int__content in (
       ()))
       in () end ;
      (let temp___331 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 20 0 0] (val _f : int
      ensures {[#"mystring.adb" 20 0 0] (result = Variablestore__variables__from_string__L_1__i.i.int__content)} 
      in _f) in (
       ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = Variablestore__variables__from_string__j.j.int__content in (
        ()))
        in () end ;
       (let temp___330 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 20 0 0] (val _f : int
       ensures {[#"mystring.adb" 20 0 0] (result = Variablestore__variables__from_string__j.j.int__content)} 
       in _f) in (
        ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = { Variablestore__variables__mystring.__split_fields = Variablestore__variables__from_string__m.m__split_fields.Variablestore__variables__mystring.__split_fields__content } in (
         ()))
         in () end ;
        (let temp___328 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 20 0 0] (val _f : Variablestore__variables__mystring.mystring
        ensures {[#"mystring.adb" 20 0 0] (result = { Variablestore__variables__mystring.__split_fields = Variablestore__variables__from_string__m.m__split_fields.Variablestore__variables__mystring.__split_fields__content })} 
        in _f) in (
         ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:20 instantiated at variablestore.ads:11 *)
         ;
         () (* While loop translating the Ada loop from mystring.adb:20 instantiated at variablestore.ads:11 *)
         ;
         (let temp___inv_332 [@mlw:proxy_symbol] [@introduced] = (Variablestore__variables__from_string__j.j.int__content = ([#"mystring.adb" 21 0 0] ( [@GP_Id:14] [@GP_Shape:L_1_while__pragargs__cmp__add] [@GP_Sloc:mystring.adb:21:49:instantiated:variablestore.ads:11:4] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                                 ^ mystring.adb:21:49:instantiated:variablestore.ads:11:4:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((([#"mystring.adb" 21 0 0] ( [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                       ^ mystring.adb:21:39:instantiated:variablestore.ads:11:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:21:39:instantiated:variablestore.ads:11:4] [@GP_Id:13] [@GP_Shape:L_1_while__pragargs__cmp__add__sub] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((Variablestore__variables__from_string__L_1__i.i.int__content - ( [#"mystring.adb" 21 0 0] begin ensures {true} let _ = (let _ = Variablestore__variables__from_string__s.s in (
          ()))
          in () end ;
         (Standard__string.first(Variablestore__variables__from_string__s.s)) )))) )) + (1 : int)))) ))) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
         ;
          while True do
          invariant { 
           ([#"mystring.adb" 21 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@GP_Id:15] [@vc:annotation] [@GP_Shape:L_1_while__pragargs__cmp] [@GP_Sloc:mystring.adb:21:33:instantiated:variablestore.ads:11:4] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                 ^ mystring.adb:21:33:instantiated:variablestore.ads:11:4:VC_LOOP_INVARIANT] ( [@GP_Pretty_Ada:110985] [@GP_Sloc:mystring.adb:21:33:instantiated:variablestore.ads:11:4] (Variablestore__variables__from_string__j.j.int__content = ((Variablestore__variables__from_string__L_1__i.i.int__content - (Standard__string.first Variablestore__variables__from_string__s.s)) + (1 : int))) ) ))
           }
          ( () (* Assume implicit invariants from the loop mystring.adb:20 instantiated at variablestore.ads:11 *)
          ;
           assume {  (Boolean.andb(( ( ( ( ( ( true /\ (Variablestore__variables__mystring___axiom.dynamic_invariant { Variablestore__variables__mystring.__split_fields = Variablestore__variables__from_string__m.m__split_fields.Variablestore__variables__mystring.__split_fields__content } True True True True) )/\({ Variablestore__variables__mystring.__split_fields = Variablestore__variables__from_string__m.m__split_fields.Variablestore__variables__mystring.__split_fields__content }.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length = temp___328.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length) ) /\ (Standard__integer___axiom.dynamic_invariant Variablestore__variables__from_string__j.j.int__content True True True True) )/\true ) /\ (if (( True \/ ((Standard__string.first Variablestore__variables__from_string__s.s) <= (Standard__string.last Variablestore__variables__from_string__s.s)) )) then (
           (Variablestore__variables__from_string__L_1__T277s.dynamic_property (Standard__string.first Variablestore__variables__from_string__s.s) (Standard__string.last Variablestore__variables__from_string__s.s) Variablestore__variables__from_string__L_1__i.i.int__content)) else true) )/\true )) (( ((Standard__string.first Variablestore__variables__from_string__s.s) <= Variablestore__variables__from_string__L_1__i.i.int__content) /\ (Variablestore__variables__from_string__L_1__i.i.int__content <= (Standard__string.last Variablestore__variables__from_string__s.s)) ))) };
          () (* Check for absence of RTE in the invariant of loop mystring.adb:20 instantiated at variablestore.ads:11 *)
          ;
          () (* Loop statements appearing after the loop invariant of loop mystring.adb:20 instantiated at variablestore.ads:11 *)
          ;
          ();
          ( [@GP_Sloc:mystring.adb:22:10:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 22 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:22:16:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 22 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:22:19:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 22 0 0] (let temp___327 [@mlw:proxy_symbol] [@introduced] = (let temp___326 [@mlw:proxy_symbol] [@introduced] = { Variablestore__variables__mystring.__split_fields = Variablestore__variables__from_string__m.m__split_fields.Variablestore__variables__mystring.__split_fields__content } in (
           ( [#"mystring.adb" 22 0 0] begin ensures {true} let _ = (let _ = temp___326.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str in (
            ()))
            in () end ;
           { ( temp___326 ) with Variablestore__variables__mystring.__split_fields = { ( temp___326.Variablestore__variables__mystring.__split_fields ) with Variablestore__variables__mystring.rec__variablestore__variables__mystring__str = (let temp___325 [@mlw:proxy_symbol] [@introduced] = { Variablestore__variables__mystring.__split_fields = Variablestore__variables__from_string__m.m__split_fields.Variablestore__variables__mystring.__split_fields__content }.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str in (
            (Array__Int__Standard__character.set({ Variablestore__variables__mystring.__split_fields = Variablestore__variables__from_string__m.m__split_fields.Variablestore__variables__mystring.__split_fields__content }.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str) (( [#"mystring.adb" 22 0 0] assert { [#"mystring.adb" 22 0 0] ([#"mystring.adb" 22 0 0] ( [@GP_Id:11] [@GP_Sloc:mystring.adb:22:16:instantiated:variablestore.ads:11:4] [@vc:annotation] [@GP_Shape:L_1_while__m_assign__ixdcomp] [@comment:         M.Str(J) := S(I);                ^ mystring.adb:22:16:instantiated:variablestore.ads:11:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] ( (Variablestore__variables__TmystringstrD1.first <= Variablestore__variables__from_string__j.j.int__content) /\ (Variablestore__variables__from_string__j.j.int__content <= Variablestore__variables__TmystringstrD1.last) ) )) };
            Variablestore__variables__from_string__j.j.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Variablestore__variables__from_string__s.s))) (Variablestore__variables__from_string__L_1__i.i.int__content))))))))))
            } } )))
           in (
            (Variablestore__variables__from_string__m.m__split_fields.Variablestore__variables__mystring.__split_fields__content <- ( temp___327.Variablestore__variables__mystring.__split_fields ))))
          ) );
          ( [@GP_Sloc:mystring.adb:23:10:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 23 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:23:15:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 23 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:23:12:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 23 0 0] [#"mystring.adb" 23 0 0] (Variablestore__variables__from_string__j.j.int__content <- ( ([#"mystring.adb" 23 0 0] ( [@GP_Shape:L_1_while__j_assign__add] [@GP_Id:12] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:23:17:instantiated:variablestore.ads:11:4] [@comment:         J := J + 1;                 ^ mystring.adb:23:17:instantiated:variablestore.ads:11:4:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((Variablestore__variables__from_string__j.j.int__content + (1 : int)))) )) ))) );
          () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:20 instantiated at variablestore.ads:11 *)
          ;
          (if ((Variablestore__variables__from_string__L_1__i.i.int__content = temp___324)) then (
            raise Variablestore__variables__from_string__L_1.L_1));
          ([#"mystring.adb" 20 0 0] [#"mystring.adb" 20 0 0] (Variablestore__variables__from_string__L_1__i.i.int__content <- ( (Variablestore__variables__from_string__L_1__i.i.int__content + (1 : int)) )));
          (let temp___inv_332 [@mlw:proxy_symbol] [@introduced] = (Variablestore__variables__from_string__j.j.int__content = ([#"mystring.adb" 21 0 0] ( [@GP_Id:14] [@GP_Shape:L_1_while__pragargs__cmp__add] [@GP_Sloc:mystring.adb:21:49:instantiated:variablestore.ads:11:4] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                                 ^ mystring.adb:21:49:instantiated:variablestore.ads:11:4:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((([#"mystring.adb" 21 0 0] ( [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                       ^ mystring.adb:21:39:instantiated:variablestore.ads:11:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:21:39:instantiated:variablestore.ads:11:4] [@GP_Id:13] [@GP_Shape:L_1_while__pragargs__cmp__add__sub] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((Variablestore__variables__from_string__L_1__i.i.int__content - ( [#"mystring.adb" 21 0 0] begin ensures {true} let _ = (let _ = Variablestore__variables__from_string__s.s in (
           ()))
           in () end ;
          (Standard__string.first(Variablestore__variables__from_string__s.s)) )))) )) + (1 : int)))) ))) in (
            begin ensures {true} let _ = (let _ = () in (
            ()))
            in () end ))
           )
         done )))
         )))
        )))
       )
     with
      Variablestore__variables__from_string__L_1.L_1 -> ()
     end)) )))
   ))
   ) );
   ( [@GP_Sloc:mystring.adb:25:14:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 25 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:25:7:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 25 0 0] ( [#"mystring.adb" 25 0 0] (variablestore__variables__from_string__result.Variablestore__variables__mystring.mystring__content <- ( { Variablestore__variables__mystring.__split_fields = Variablestore__variables__from_string__m.m__split_fields.Variablestore__variables__mystring.__split_fields__content } ));
   [#"mystring.adb" 25 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Variablestore__variables__length___axiom.length(variablestore__variables__from_string__result.Variablestore__variables__mystring.mystring__content)) = ([#"mystring.ads" 14 0 0] ( [@comment:     Post => (Length(From_String'Result) = S'Length);                                             ^ mystring.ads:14:45:instantiated:variablestore.ads:11:4:VC_RANGE_CHECK] [@GP_Id:16] [@vc:annotation] [@GP_Sloc:mystring.ads:14:45:instantiated:variablestore.ads:11:4] [@GP_Shape:pragargs__cmp__typeconv__length_ref] [@GP_Reason:VC_RANGE_CHECK] (Standard__integer.range_check_(( [#"mystring.ads" 14 0 0] begin ensures {true} let _ = (let _ = Variablestore__variables__from_string__s.s in (
   ()))
   in () end ;
  (Standard__string.length(Variablestore__variables__from_string__s.s)) ))) ))) in (
   ()))
   in () end ;
  variablestore__variables__from_string__result.Variablestore__variables__mystring.mystring__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "less" defined at mystring.ads:16 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Variablestore__variables__less__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Variablestore__variables__mystring as Variablestore__variables__mystring
 use        Variablestore__variables__less__m1 as Variablestore__variables__less__m1
 use        Variablestore__variables__less__m2 as Variablestore__variables__less__m2
 use        Variablestore__variables__mystring___axiom as Variablestore__variables__mystring___axiom
 use        Variablestore__variables__less__i as Variablestore__variables__less__i
 use        Variablestore__variables__mystring__T13s as Variablestore__variables__mystring__T13s
 use        Variablestore__variables__mystring__T13s__rep as Variablestore__variables__mystring__T13s__rep
 use        Variablestore__variables__TmystringstrD1 as Variablestore__variables__TmystringstrD1
 use        Variablestore__variables__less__L_2 as Variablestore__variables__less__L_2
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Variablestore__variables__less__m1___axiom as Variablestore__variables__less__m1___axiom
 use        Variablestore__variables__less__m2___axiom as Variablestore__variables__less__m2___axiom
 use        Variablestore__variables__mystringstr___axiom as Variablestore__variables__mystringstr___axiom
 use        Variablestore__variables__mystring___axiom as Variablestore__variables__mystring___axiom
 use        Variablestore__variables__TmystringstrD1___axiom as Variablestore__variables__TmystringstrD1___axiom
 use        Variablestore__variables__mystring__T13s___axiom as Variablestore__variables__mystring__T13s___axiom
 use        Variablestore__variables__less__i___axiom as Variablestore__variables__less__i___axiom
 use        Variablestore__variables__less__L_2___axiom as Variablestore__variables__less__L_2___axiom

 val variablestore__variables__less__result [@model_trace:68261@result] [@model_projected] [@name:Less]  : bool__ref 
 
 let def [#"mystring.ads" 16 0 0][@GP_Subp:mystring.ads:16] 
   (__void_param : unit)
  requires { [#"mystring.ads" 16 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:16 instantiated at variablestore.ads:11 *)
  ;
  [#"mystring.ads" 16 0 0] assume { [#"mystring.ads" 16 0 0] (Variablestore__variables__mystring___axiom.dynamic_invariant Variablestore__variables__less__m1.m1 True False True True) };
  [#"mystring.ads" 16 0 0] assume { [#"mystring.ads" 16 0 0] (Variablestore__variables__mystring___axiom.dynamic_invariant Variablestore__variables__less__m2.m2 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:16 instantiated at variablestore.ads:11 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:16 instantiated at variablestore.ads:11 *)
  ;
  [#"mystring.ads" 16 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:16 instantiated at variablestore.ads:11 *)
  ;
  [#"mystring.ads" 16 0 0] try
   ( ();
   ([#"mystring.adb" 29 0 0] ( [#"mystring.adb" 29 0 0] (Variablestore__variables__less__i.i.int__content <- ( (1 : int) ));
   [#"mystring.adb" 29 0 0] assume { [#"mystring.adb" 29 0 0] (Standard__integer___axiom.dynamic_invariant Variablestore__variables__less__i.i.int__content True False True True) } ));
   ([#"mystring.adb" 36 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:31:7:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 31 0 0] (if (( ([#"mystring.adb" 31 0 0] [#"mystring.adb" 31 0 0] (([@branch_id=111114] Main.spark__branch).bool__content <- ( ((Variablestore__variables__mystring__T13s__rep.to_rep(Variablestore__variables__less__m1.m1.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length)) < (Variablestore__variables__mystring__T13s__rep.to_rep(Variablestore__variables__less__m2.m2.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length))) )));
   ( [@branch_id=111114] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:mystring.adb:32:10:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 32 0 0] ( [#"mystring.adb" 32 0 0] (variablestore__variables__less__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
    [#"mystring.adb" 32 0 0] raise Return__exc )) ) )) else (
    ( [@GP_Sloc:mystring.adb:33:7:instantiated:variablestore.ads:11:4] (if (( ([#"mystring.adb" 33 0 0] [#"mystring.adb" 33 0 0] (([@branch_id=111124] Main.spark__branch).bool__content <- ( ((Variablestore__variables__mystring__T13s__rep.to_rep(Variablestore__variables__less__m1.m1.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length)) > (Variablestore__variables__mystring__T13s__rep.to_rep(Variablestore__variables__less__m2.m2.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length))) )));
    ( [@branch_id=111124] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:mystring.adb:34:10:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 34 0 0] ( [#"mystring.adb" 34 0 0] (variablestore__variables__less__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
     [#"mystring.adb" 34 0 0] raise Return__exc )) ) )) else (
     ( ();
     ( [@GP_Sloc:mystring.adb:36:35:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 36 0 0] ( () (* Translation of an Ada loop from mystring.adb:36 instantiated at variablestore.ads:11 *)
     ;
     (if ((Variablestore__variables__less__i.i.int__content <= (1024 : int))) then (
      [#"mystring.adb" 36 0 0] try
       ( [#"mystring.adb" 36 0 0] begin ensures {true} let _ = (let _ = Variablestore__variables__less__i.i.int__content in (
        ()))
        in () end ;
       (let temp___340 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 36 0 0] (val _f : int
       ensures {[#"mystring.adb" 36 0 0] (result = Variablestore__variables__less__i.i.int__content)} 
       in _f) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:36 instantiated at variablestore.ads:11 *)
        ;
        () (* While loop translating the Ada loop from mystring.adb:36 instantiated at variablestore.ads:11 *)
        ;
        (let temp___inv_341 [@mlw:proxy_symbol] [@introduced] = (Variablestore__variables__less__i.i.int__content >= (1 : int)) in (
         [#"mystring.adb" 36 0 0] begin ensures {true} let _ = (let _ = () in (
          ()))
          in () end ))
        ;
        [#"mystring.adb" 36 0 0] while True do
         invariant { 
          ([#"mystring.adb" 37 0 0] ( [@comment:            pragma Loop_Invariant (I >= M1.Str'First);                                    ^ mystring.adb:37:36:instantiated:variablestore.ads:11:4:VC_LOOP_INVARIANT] [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Sloc:mystring.adb:37:36:instantiated:variablestore.ads:11:4] [@GP_Id:24] [@GP_Shape:if__L_2_while__pragargs__cmp] ( [@GP_Pretty_Ada:111145] [@GP_Sloc:mystring.adb:37:36:instantiated:variablestore.ads:11:4] (Variablestore__variables__less__i.i.int__content >= (1 : int)) ) ))
          }
         ( () (* Assume implicit invariants from the loop mystring.adb:36 instantiated at variablestore.ads:11 *)
         ;
          assume {  (Boolean.andb(( ( true /\ (Standard__integer___axiom.dynamic_invariant Variablestore__variables__less__i.i.int__content True True True True) )/\true )) ((Variablestore__variables__less__i.i.int__content <= (1024 : int)))) };
         () (* Check for absence of RTE in the invariant of loop mystring.adb:36 instantiated at variablestore.ads:11 *)
         ;
         () (* Loop statements appearing after the loop invariant of loop mystring.adb:36 instantiated at variablestore.ads:11 *)
         ;
         ();
         ( [@GP_Sloc:mystring.adb:38:23:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 38 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:38:35:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 38 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:38:13:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 38 0 0] (if (( ([#"mystring.adb" 38 0 0] [#"mystring.adb" 38 0 0] (([@branch_id=111152] Main.spark__branch).bool__content <- ( ((Standard__character__rep.to_rep((let temp___338 [@mlw:proxy_symbol] [@introduced] = Variablestore__variables__less__m1.m1.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str in (
          (Array__Int__Standard__character.get(temp___338) (( [#"mystring.adb" 38 0 0] assert { [#"mystring.adb" 38 0 0] ([#"mystring.adb" 38 0 0] ( [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@vc:annotation] [@comment:            if M1.Str(I) < M2.Str(I) then                       ^ mystring.adb:38:23:instantiated:variablestore.ads:11:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:38:23:instantiated:variablestore.ads:11:4] [@GP_Id:22] ( (Variablestore__variables__TmystringstrD1.first <= Variablestore__variables__less__i.i.int__content) /\ (Variablestore__variables__less__i.i.int__content <= Variablestore__variables__TmystringstrD1.last) ) )) };
          Variablestore__variables__less__i.i.int__content )))))
         )) < (Standard__character__rep.to_rep((let temp___339 [@mlw:proxy_symbol] [@introduced] = Variablestore__variables__less__m2.m2.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str in (
          (Array__Int__Standard__character.get(temp___339) ((  assert {  ([#"mystring.adb" 38 0 0] ( [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@vc:annotation] [@comment:            if M1.Str(I) < M2.Str(I) then                                   ^ mystring.adb:38:35:instantiated:variablestore.ads:11:4:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:38:35:instantiated:variablestore.ads:11:4] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:23] ( (Variablestore__variables__TmystringstrD1.first <= Variablestore__variables__less__i.i.int__content) /\ (Variablestore__variables__less__i.i.int__content <= Variablestore__variables__TmystringstrD1.last) ) )) };
          Variablestore__variables__less__i.i.int__content )))))
         ))) )));
         ( [@branch_id=111152] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:mystring.adb:39:16:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 39 0 0] ( [#"mystring.adb" 39 0 0] (variablestore__variables__less__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
          [#"mystring.adb" 39 0 0] raise Return__exc )) ) )) else (
          ( [@GP_Sloc:mystring.adb:40:13:instantiated:variablestore.ads:11:4] (if (( ([#"mystring.adb" 40 0 0] [#"mystring.adb" 40 0 0] (([@branch_id=111166] Main.spark__branch).bool__content <- ( ((Standard__character__rep.to_rep((let temp___336 [@mlw:proxy_symbol] [@introduced] = Variablestore__variables__less__m1.m1.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str in (
           (Array__Int__Standard__character.get(temp___336) (( [#"mystring.adb" 40 0 0] assert { [#"mystring.adb" 40 0 0] ([#"mystring.adb" 40 0 0] ( [@comment:            elsif M1.Str(I) > M2.Str(I) then                          ^ mystring.adb:40:26:instantiated:variablestore.ads:11:4:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:40:26:instantiated:variablestore.ads:11:4] [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:20] ( (Variablestore__variables__TmystringstrD1.first <= Variablestore__variables__less__i.i.int__content) /\ (Variablestore__variables__less__i.i.int__content <= Variablestore__variables__TmystringstrD1.last) ) )) };
           Variablestore__variables__less__i.i.int__content )))))
          )) > (Standard__character__rep.to_rep((let temp___337 [@mlw:proxy_symbol] [@introduced] = Variablestore__variables__less__m2.m2.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str in (
           (Array__Int__Standard__character.get(temp___337) ((  assert {  ([#"mystring.adb" 40 0 0] ( [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@comment:            elsif M1.Str(I) > M2.Str(I) then                                      ^ mystring.adb:40:38:instantiated:variablestore.ads:11:4:VC_INDEX_CHECK] [@GP_Id:21] [@GP_Sloc:mystring.adb:40:38:instantiated:variablestore.ads:11:4] ( (Variablestore__variables__TmystringstrD1.first <= Variablestore__variables__less__i.i.int__content) /\ (Variablestore__variables__less__i.i.int__content <= Variablestore__variables__TmystringstrD1.last) ) )) };
           Variablestore__variables__less__i.i.int__content )))))
          ))) )));
          ( [@branch_id=111166] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:mystring.adb:41:16:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 41 0 0] ( [#"mystring.adb" 41 0 0] (variablestore__variables__less__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
           [#"mystring.adb" 41 0 0] raise Return__exc )) ) )) else (
           ( ();
           ( [@GP_Sloc:mystring.adb:43:16:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 43 0 0] ()) );
           ( [@GP_Sloc:mystring.adb:43:21:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 43 0 0] ()) );
           ( [@GP_Sloc:mystring.adb:43:18:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 43 0 0] [#"mystring.adb" 43 0 0] (Variablestore__variables__less__i.i.int__content <- ( ([#"mystring.adb" 43 0 0] ( [@comment:               I := I + 1;                       ^ mystring.adb:43:23:instantiated:variablestore.ads:11:4:VC_OVERFLOW_CHECK] [@GP_Id:19] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_2_while__if__i_assign__add] [@GP_Sloc:mystring.adb:43:23:instantiated:variablestore.ads:11:4] (Standard__integer.range_check_((Variablestore__variables__less__i.i.int__content + (1 : int)))) )) ))) ) ))) )))) );
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:36 instantiated at variablestore.ads:11 *)
         ;
         (if (not ( (Variablestore__variables__less__i.i.int__content <= (1024 : int)) )) then (
           raise Variablestore__variables__less__L_2.L_2));
         (let temp___inv_341 [@mlw:proxy_symbol] [@introduced] = (Variablestore__variables__less__i.i.int__content >= (1 : int)) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
          )
        done )))
        )
      with
       Variablestore__variables__less__L_2.L_2 -> ()
      end)) )) );
     ( [@GP_Sloc:mystring.adb:47:10:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 47 0 0] ( [#"mystring.adb" 47 0 0] (variablestore__variables__less__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
     [#"mystring.adb" 47 0 0] raise Return__exc )) ) ))) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  variablestore__variables__less__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get" defined at mystring.ads:30 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Variablestore__variables__get__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Variablestore__variables__mystring as Variablestore__variables__mystring
 use        Variablestore__variables__length as Variablestore__variables__length
 use        Variablestore__variables__length___axiom as Variablestore__variables__length___axiom
 use        Variablestore__variables__get__m as Variablestore__variables__get__m
 use        Variablestore__variables__get__index as Variablestore__variables__get__index
 use        Variablestore__variables__mystring___axiom as Variablestore__variables__mystring___axiom
 use        Variablestore__variables__TmystringstrD1 as Variablestore__variables__TmystringstrD1
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Variablestore__variables__length___axiom as Variablestore__variables__length___axiom
 use        Variablestore__variables__get__m___axiom as Variablestore__variables__get__m___axiom
 use        Variablestore__variables__get__index___axiom as Variablestore__variables__get__index___axiom
 use        Variablestore__variables__mystringstr___axiom as Variablestore__variables__mystringstr___axiom
 use        Variablestore__variables__mystring___axiom as Variablestore__variables__mystring___axiom
 use        Variablestore__variables__TmystringstrD1___axiom as Variablestore__variables__TmystringstrD1___axiom
 use        Variablestore__variables__mystring__T13s___axiom as Variablestore__variables__mystring__T13s___axiom

 val variablestore__variables__get__result [@model_trace:68445@result] [@model_projected] [@name:Get]  : int__ref 
 
 let def [#"mystring.ads" 30 0 0][@GP_Subp:mystring.ads:30] 
   (__void_param : unit)
  requires { [#"mystring.ads" 30 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:30 instantiated at variablestore.ads:11 *)
  ;
  [#"mystring.ads" 30 0 0] assume { [#"mystring.ads" 30 0 0] (Variablestore__variables__mystring___axiom.dynamic_invariant Variablestore__variables__get__m.m True False True True) };
  [#"mystring.ads" 30 0 0] assume { [#"mystring.ads" 30 0 0] (Standard__positive___axiom.dynamic_invariant Variablestore__variables__get__index.index True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:30 instantiated at variablestore.ads:11 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:30 instantiated at variablestore.ads:11 *)
  ;
  [#"mystring.ads" 30 0 0] begin ensures {true} let _ = (let _ = (Variablestore__variables__get__index.index <= (Variablestore__variables__length___axiom.length(Variablestore__variables__get__m.m))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:30 instantiated at variablestore.ads:11 *)
  ;
  [#"mystring.ads" 30 0 0] assume { [#"mystring.ads" 30 0 0] ( [@GP_Pretty_Ada:68823] (Variablestore__variables__get__index.index <= (epsilon temp___result_346 : int.
   ( (temp___result_346 = (Variablestore__variables__length.length Variablestore__variables__get__m.m)) /\ (Variablestore__variables__length.length__function_guard temp___result_346 Variablestore__variables__get__m.m) ))) ) };
  [#"mystring.ads" 30 0 0] try
   ( ();
   ( [@GP_Sloc:mystring.ads:46:8:instantiated:variablestore.ads:11:4] ([#"mystring.ads" 46 0 0] ( [#"mystring.ads" 46 0 0] (variablestore__variables__get__result.int__content <- ( (Standard__character__rep.to_rep((let temp___344 [@mlw:proxy_symbol] [@introduced] = Variablestore__variables__get__m.m.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str in (
    (Array__Int__Standard__character.get(temp___344) (( [#"mystring.ads" 46 0 0] assert { [#"mystring.ads" 46 0 0] ([#"mystring.ads" 46 0 0] ( [@GP_Shape:return__ixdcomp] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@comment:     (M.Str(Index));             ^ mystring.ads:46:13:instantiated:variablestore.ads:11:4:VC_INDEX_CHECK] [@GP_Id:25] [@GP_Sloc:mystring.ads:46:13:instantiated:variablestore.ads:11:4] ( (Variablestore__variables__TmystringstrD1.first <= Variablestore__variables__get__index.index) /\ (Variablestore__variables__get__index.index <= Variablestore__variables__TmystringstrD1.last) ) )) };
    Variablestore__variables__get__index.index )))))
   )) ));
    raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  variablestore__variables__get__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "equal" defined at mystring.ads:18 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Variablestore__variables__equal__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Variablestore__variables__mystring as Variablestore__variables__mystring
 use        Variablestore__variables__length as Variablestore__variables__length
 use        Variablestore__variables__length___axiom as Variablestore__variables__length___axiom
 use        Variablestore__variables__equal__m1 as Variablestore__variables__equal__m1
 use        Variablestore__variables__equal__m2 as Variablestore__variables__equal__m2
 use        Variablestore__variables__get as Variablestore__variables__get
 use        Variablestore__variables__get___axiom as Variablestore__variables__get___axiom
 use        Variablestore__variables__mystring___axiom as Variablestore__variables__mystring___axiom
 use        Variablestore__variables__equal__i as Variablestore__variables__equal__i
 use        Variablestore__variables__mystring__T13s as Variablestore__variables__mystring__T13s
 use        Variablestore__variables__mystring__T13s__rep as Variablestore__variables__mystring__T13s__rep
 use        Variablestore__variables__TmystringstrD1 as Variablestore__variables__TmystringstrD1
 use        Variablestore__variables__equal__L_3 as Variablestore__variables__equal__L_3
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Variablestore__variables__equal__m1___axiom as Variablestore__variables__equal__m1___axiom
 use        Variablestore__variables__equal__m2___axiom as Variablestore__variables__equal__m2___axiom
 use        Variablestore__variables__length___axiom as Variablestore__variables__length___axiom
 use        Variablestore__variables__get___axiom as Variablestore__variables__get___axiom
 use        Variablestore__variables__mystringstr___axiom as Variablestore__variables__mystringstr___axiom
 use        Variablestore__variables__mystring___axiom as Variablestore__variables__mystring___axiom
 use        Variablestore__variables__TmystringstrD1___axiom as Variablestore__variables__TmystringstrD1___axiom
 use        Variablestore__variables__mystring__T13s___axiom as Variablestore__variables__mystring__T13s___axiom
 use        Variablestore__variables__equal__i___axiom as Variablestore__variables__equal__i___axiom
 use        Variablestore__variables__equal__L_3___axiom as Variablestore__variables__equal__L_3___axiom

 val variablestore__variables__equal__result [@model_trace:68325@result] [@name:Equal] [@model_projected]  : bool__ref 
 
 let def [#"mystring.ads" 18 0 0][@GP_Subp:mystring.ads:18] 
   (__void_param : unit)
  requires { [#"mystring.ads" 18 0 0] true }
  ensures { [#"mystring.ads" 18 0 0] ([#"mystring.ads" 19 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@comment:     Post => (if Equal'Result then               ^ mystring.ads:19:15:instantiated:variablestore.ads:11:4:VC_POSTCONDITION] [@GP_Id:35] [@model_vc_post] [@GP_Sloc:mystring.ads:19:15:instantiated:variablestore.ads:11:4] [@GP_Shape:pragargs__if] (if ((variablestore__variables__equal__result.bool__content = True)) then (
   ( ( [@GP_Sloc:mystring.ads:20:11:instantiated:variablestore.ads:11:4] [@GP_Pretty_Ada:68294] ((epsilon temp___result_362 : int.
    ( (temp___result_362 = (Variablestore__variables__length.length Variablestore__variables__equal__m1.m1)) /\ (Variablestore__variables__length.length__function_guard temp___result_362 Variablestore__variables__equal__m1.m1) )) = (epsilon temp___result_363 : int.
    ( (temp___result_363 = (Variablestore__variables__length.length Variablestore__variables__equal__m2.m2)) /\ (Variablestore__variables__length.length__function_guard temp___result_363 Variablestore__variables__equal__m2.m2) ))) ) /\ (forall i [#"mystring.ads" 19 0 0]  [@model_trace:68312] [@name:I]  : int.
    ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_364 : int.
     ( (temp___result_364 = (Variablestore__variables__length.length Variablestore__variables__equal__m1.m1)) /\ (Variablestore__variables__length.length__function_guard temp___result_364 Variablestore__variables__equal__m1.m1) ))) ) -> ( [@GP_Sloc:mystring.ads:21:40:instantiated:variablestore.ads:11:4] [@GP_Pretty_Ada:68302] ((epsilon temp___result_365 : int.
     ( (temp___result_365 = (Variablestore__variables__get.get Variablestore__variables__equal__m1.m1 i)) /\ (Variablestore__variables__get.get__function_guard temp___result_365 Variablestore__variables__equal__m1.m1 i) )) = (epsilon temp___result_366 : int.
     ( (temp___result_366 = (Variablestore__variables__get.get Variablestore__variables__equal__m2.m2 i)) /\ (Variablestore__variables__get.get__function_guard temp___result_366 Variablestore__variables__equal__m2.m2 i) ))) ) )) )) else (
   ( [@GP_Pretty_Ada:68901] [@GP_Sloc:mystring.ads:19:15:instantiated:variablestore.ads:11:4] true ))) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:18 instantiated at variablestore.ads:11 *)
  ;
   assume {  (Variablestore__variables__mystring___axiom.dynamic_invariant Variablestore__variables__equal__m1.m1 True False True True) };
   assume {  (Variablestore__variables__mystring___axiom.dynamic_invariant Variablestore__variables__equal__m2.m2 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:18 instantiated at variablestore.ads:11 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:18 instantiated at variablestore.ads:11 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:18 instantiated at variablestore.ads:11 *)
  ;
   try
   ( ();
   ([#"mystring.adb" 53 0 0] ( [#"mystring.adb" 53 0 0] (Variablestore__variables__equal__i.i.int__content <- ( (1 : int) ));
   [#"mystring.adb" 53 0 0] assume { [#"mystring.adb" 53 0 0] (Standard__integer___axiom.dynamic_invariant Variablestore__variables__equal__i.i.int__content True False True True) } ));
   ([#"mystring.adb" 58 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:55:7:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 55 0 0] (if (( ([#"mystring.adb" 55 0 0] [#"mystring.adb" 55 0 0] (([@branch_id=111303] Main.spark__branch).bool__content <- ( ((Variablestore__variables__mystring__T13s__rep.to_rep(Variablestore__variables__equal__m1.m1.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length)) <> (Variablestore__variables__mystring__T13s__rep.to_rep(Variablestore__variables__equal__m2.m2.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length))) )));
   ( [@branch_id=111303] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:mystring.adb:56:10:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 56 0 0] ( [#"mystring.adb" 56 0 0] (variablestore__variables__equal__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
    [#"mystring.adb" 56 0 0] raise Return__exc )) ) )) else (
    ( ();
    ( [@GP_Sloc:mystring.adb:58:35:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 58 0 0] ( () (* Translation of an Ada loop from mystring.adb:58 instantiated at variablestore.ads:11 *)
    ;
    (if ((Variablestore__variables__equal__i.i.int__content <= (1024 : int))) then (
     [#"mystring.adb" 58 0 0] try
      ( [#"mystring.adb" 58 0 0] begin ensures {true} let _ = (let _ = Variablestore__variables__equal__i.i.int__content in (
       ()))
       in () end ;
      (let temp___349 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 58 0 0] (val _f : int
      ensures {[#"mystring.adb" 58 0 0] (result = Variablestore__variables__equal__i.i.int__content)} 
      in _f) in (
       ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:58 instantiated at variablestore.ads:11 *)
       ;
       () (* While loop translating the Ada loop from mystring.adb:58 instantiated at variablestore.ads:11 *)
       ;
       (let temp___inv_350 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb((Variablestore__variables__equal__i.i.int__content >= (1 : int))) (( (let j = [#"mystring.adb" 58 0 0] (val _f : int
       in _f) in (
        (if ((Boolean.andb(((1 : int) <= j)) ((j <= ([#"mystring.adb" 60 0 0] ( [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                      ^ mystring.adb:60:54:instantiated:variablestore.ads:11:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:60:54:instantiated:variablestore.ads:11:4] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__range__sub] [@GP_Id:29] (Standard__integer.range_check_((Variablestore__variables__equal__i.i.int__content - (1 : int)))) )))))) then (
          begin ensures {true} let _ = (let _ = ((Standard__character__rep.to_rep((let temp___351 [@mlw:proxy_symbol] [@introduced] = Variablestore__variables__equal__m1.m1.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str in (
          (Array__Int__Standard__character.get(temp___351) ((  assert {  ([#"mystring.adb" 60 0 0] ( [@vc:annotation] [@GP_Id:30] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:60:67:instantiated:variablestore.ads:11:4] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                   ^ mystring.adb:60:67:instantiated:variablestore.ads:11:4:VC_INDEX_CHECK] ( (Variablestore__variables__TmystringstrD1.first <= j) /\ (j <= Variablestore__variables__TmystringstrD1.last) ) )) };
          j )))))
         )) = (Standard__character__rep.to_rep((let temp___352 [@mlw:proxy_symbol] [@introduced] = Variablestore__variables__equal__m2.m2.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str in (
          (Array__Int__Standard__character.get(temp___352) ((  assert {  ([#"mystring.adb" 60 0 0] ( [@vc:annotation] [@GP_Id:31] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                               ^ mystring.adb:60:79:instantiated:variablestore.ads:11:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:60:79:instantiated:variablestore.ads:11:4] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] ( (Variablestore__variables__TmystringstrD1.first <= j) /\ (j <= Variablestore__variables__TmystringstrD1.last) ) )) };
          j )))))
         ))) in (
          ()))
          in () end ))))
       ;
        (val _f : bool
       ensures { ( (result = True) <-> (forall j   [@model_trace:111344] [@name:J]  : int.
        ( ( ((1 : int) <= j) /\ (j <= (Variablestore__variables__equal__i.i.int__content - (1 : int))) ) -> ((Standard__character__rep.to_rep (let temp___353 [@mlw:proxy_symbol] [@introduced] = Variablestore__variables__equal__m1.m1.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str in (
         (Array__Int__Standard__character.get temp___353 j)))
        ) = (Standard__character__rep.to_rep (let temp___354 [@mlw:proxy_symbol] [@introduced] = Variablestore__variables__equal__m2.m2.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str in (
         (Array__Int__Standard__character.get temp___354 j)))
        )) )) )} 
       in _f) ))) in (
         begin ensures {true} let _ = (let _ = () in (
         ()))
         in () end ))
       ;
        while True do
        invariant { 
         ([#"mystring.adb" 59 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@comment:            pragma Loop_Invariant (I >= M1.Str'First and                                    ^ mystring.adb:59:36:instantiated:variablestore.ads:11:4:VC_LOOP_INVARIANT] [@GP_Sloc:mystring.adb:59:36:instantiated:variablestore.ads:11:4] [@GP_Id:32] [@GP_Shape:if__L_3_while__pragargs__and] ( ( [@GP_Sloc:mystring.adb:59:36:instantiated:variablestore.ads:11:4] [@GP_Pretty_Ada:111325] (Variablestore__variables__equal__i.i.int__content >= (1 : int)) ) /\ (forall j [#"mystring.adb" 59 0 0]  [@model_trace:111344] [@name:J]  : int.
          ( ( ((1 : int) <= j) /\ (j <= (Variablestore__variables__equal__i.i.int__content - (1 : int))) ) -> ( [@GP_Pretty_Ada:111332] [@GP_Sloc:mystring.adb:60:60:instantiated:variablestore.ads:11:4] ((Standard__character__rep.to_rep (let temp___355 [@mlw:proxy_symbol] [@introduced] = Variablestore__variables__equal__m1.m1.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str in (
           (Array__Int__Standard__character.get temp___355 j)))
          ) = (Standard__character__rep.to_rep (let temp___356 [@mlw:proxy_symbol] [@introduced] = Variablestore__variables__equal__m2.m2.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str in (
           (Array__Int__Standard__character.get temp___356 j)))
          )) ) )) ) ))
         }
        ( () (* Assume implicit invariants from the loop mystring.adb:58 instantiated at variablestore.ads:11 *)
        ;
         assume {  (Boolean.andb(( ( true /\ (Standard__integer___axiom.dynamic_invariant Variablestore__variables__equal__i.i.int__content True True True True) )/\true )) ((Variablestore__variables__equal__i.i.int__content <= (1024 : int)))) };
        () (* Check for absence of RTE in the invariant of loop mystring.adb:58 instantiated at variablestore.ads:11 *)
        ;
        () (* Loop statements appearing after the loop invariant of loop mystring.adb:58 instantiated at variablestore.ads:11 *)
        ;
        ();
        ( [@GP_Sloc:mystring.adb:61:23:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 61 0 0] ()) );
        ( [@GP_Sloc:mystring.adb:61:36:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 61 0 0] ()) );
        ( [@GP_Sloc:mystring.adb:61:13:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 61 0 0] (if (( ([#"mystring.adb" 61 0 0] [#"mystring.adb" 61 0 0] (([@branch_id=111357] Main.spark__branch).bool__content <- ( ((Standard__character__rep.to_rep((let temp___347 [@mlw:proxy_symbol] [@introduced] = Variablestore__variables__equal__m1.m1.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str in (
         (Array__Int__Standard__character.get(temp___347) (( [#"mystring.adb" 61 0 0] assert { [#"mystring.adb" 61 0 0] ([#"mystring.adb" 61 0 0] ( [@GP_Shape:if__L_3_while__if__cmp__ixdcomp] [@vc:annotation] [@comment:            if M1.Str(I) /= M2.Str(I) then                       ^ mystring.adb:61:23:instantiated:variablestore.ads:11:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:61:23:instantiated:variablestore.ads:11:4] [@GP_Id:27] ( (Variablestore__variables__TmystringstrD1.first <= Variablestore__variables__equal__i.i.int__content) /\ (Variablestore__variables__equal__i.i.int__content <= Variablestore__variables__TmystringstrD1.last) ) )) };
         Variablestore__variables__equal__i.i.int__content )))))
        )) <> (Standard__character__rep.to_rep((let temp___348 [@mlw:proxy_symbol] [@introduced] = Variablestore__variables__equal__m2.m2.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str in (
         (Array__Int__Standard__character.get(temp___348) ((  assert {  ([#"mystring.adb" 61 0 0] ( [@GP_Shape:if__L_3_while__if__cmp__ixdcomp] [@vc:annotation] [@GP_Sloc:mystring.adb:61:36:instantiated:variablestore.ads:11:4] [@GP_Reason:VC_INDEX_CHECK] [@comment:            if M1.Str(I) /= M2.Str(I) then                                    ^ mystring.adb:61:36:instantiated:variablestore.ads:11:4:VC_INDEX_CHECK] [@GP_Id:28] ( (Variablestore__variables__TmystringstrD1.first <= Variablestore__variables__equal__i.i.int__content) /\ (Variablestore__variables__equal__i.i.int__content <= Variablestore__variables__TmystringstrD1.last) ) )) };
         Variablestore__variables__equal__i.i.int__content )))))
        ))) )));
        ( [@branch_id=111357] Main.spark__branch ).bool__content )) then (
         ( ();
         ( [@GP_Sloc:mystring.adb:62:16:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 62 0 0] ( [#"mystring.adb" 62 0 0] (variablestore__variables__equal__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
         [#"mystring.adb" 62 0 0] raise Return__exc )) ) )) else (
         ( ();
         ( [@GP_Sloc:mystring.adb:64:16:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 64 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:64:21:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 64 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:64:18:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 64 0 0] [#"mystring.adb" 64 0 0] (Variablestore__variables__equal__i.i.int__content <- ( ([#"mystring.adb" 64 0 0] ( [@comment:               I := I + 1;                       ^ mystring.adb:64:23:instantiated:variablestore.ads:11:4:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_3_while__if__i_assign__add] [@GP_Id:26] [@GP_Sloc:mystring.adb:64:23:instantiated:variablestore.ads:11:4] (Standard__integer.range_check_((Variablestore__variables__equal__i.i.int__content + (1 : int)))) )) ))) ) )))) );
        () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:58 instantiated at variablestore.ads:11 *)
        ;
        (if (not ( (Variablestore__variables__equal__i.i.int__content <= (1024 : int)) )) then (
          raise Variablestore__variables__equal__L_3.L_3));
        (let temp___inv_350 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb((Variablestore__variables__equal__i.i.int__content >= (1 : int))) (( (let j =  (val _f : int
        in _f) in (
         (if ((Boolean.andb(((1 : int) <= j)) ((j <= ([#"mystring.adb" 60 0 0] ( [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                      ^ mystring.adb:60:54:instantiated:variablestore.ads:11:4:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:60:54:instantiated:variablestore.ads:11:4] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__range__sub] [@GP_Id:29] (Standard__integer.range_check_((Variablestore__variables__equal__i.i.int__content - (1 : int)))) )))))) then (
           begin ensures {true} let _ = (let _ = ((Standard__character__rep.to_rep((let temp___351 [@mlw:proxy_symbol] [@introduced] = Variablestore__variables__equal__m1.m1.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str in (
           (Array__Int__Standard__character.get(temp___351) ((  assert {  ([#"mystring.adb" 60 0 0] ( [@vc:annotation] [@GP_Id:30] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:60:67:instantiated:variablestore.ads:11:4] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                   ^ mystring.adb:60:67:instantiated:variablestore.ads:11:4:VC_INDEX_CHECK] ( (Variablestore__variables__TmystringstrD1.first <= j) /\ (j <= Variablestore__variables__TmystringstrD1.last) ) )) };
           j )))))
          )) = (Standard__character__rep.to_rep((let temp___352 [@mlw:proxy_symbol] [@introduced] = Variablestore__variables__equal__m2.m2.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str in (
           (Array__Int__Standard__character.get(temp___352) ((  assert {  ([#"mystring.adb" 60 0 0] ( [@vc:annotation] [@GP_Id:31] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                               ^ mystring.adb:60:79:instantiated:variablestore.ads:11:4:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:60:79:instantiated:variablestore.ads:11:4] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] ( (Variablestore__variables__TmystringstrD1.first <= j) /\ (j <= Variablestore__variables__TmystringstrD1.last) ) )) };
           j )))))
          ))) in (
           ()))
           in () end ))))
        ;
         (val _f : bool
        ensures { ( (result = True) <-> (forall j   [@model_trace:111344] [@name:J]  : int.
         ( ( ((1 : int) <= j) /\ (j <= (Variablestore__variables__equal__i.i.int__content - (1 : int))) ) -> ((Standard__character__rep.to_rep (let temp___353 [@mlw:proxy_symbol] [@introduced] = Variablestore__variables__equal__m1.m1.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str in (
          (Array__Int__Standard__character.get temp___353 j)))
         ) = (Standard__character__rep.to_rep (let temp___354 [@mlw:proxy_symbol] [@introduced] = Variablestore__variables__equal__m2.m2.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str in (
          (Array__Int__Standard__character.get temp___354 j)))
         )) )) )} 
        in _f) ))) in (
          begin ensures {true} let _ = (let _ = () in (
          ()))
          in () end ))
         )
       done )))
       )
     with
      Variablestore__variables__equal__L_3.L_3 -> ()
     end)) )) );
    ( [@GP_Sloc:mystring.adb:67:10:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 67 0 0] ( [#"mystring.adb" 67 0 0] (variablestore__variables__equal__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
    [#"mystring.adb" 67 0 0] raise Return__exc )) ) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (if (variablestore__variables__equal__result.bool__content) then (
   (Boolean.andb(((Variablestore__variables__length___axiom.length(Variablestore__variables__equal__m1.m1)) = (Variablestore__variables__length___axiom.length(Variablestore__variables__equal__m2.m2)))) (( (let i =  (val _f : int
   in _f) in (
    (if ((Boolean.andb(((1 : int) <= i)) ((i <= (Variablestore__variables__length___axiom.length(Variablestore__variables__equal__m1.m1)))))) then (
      begin ensures {true} let _ = (let _ = (([#"mystring.ads" 21 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:        (for all I in 1..Length(M1) => Get(M1,I) = Get(M2,I)));                                        ^ mystring.ads:21:40:instantiated:variablestore.ads:11:4:VC_PRECONDITION] [@GP_Sloc:mystring.ads:21:40:instantiated:variablestore.ads:11:4] [@GP_Shape:pragargs__if__and__forall__cmp__call_get] [@GP_Id:33] (Variablestore__variables__get___axiom.get(Variablestore__variables__equal__m1.m1) (i)) )) = ([#"mystring.ads" 21 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:        (for all I in 1..Length(M1) => Get(M1,I) = Get(M2,I)));                                                    ^ mystring.ads:21:52:instantiated:variablestore.ads:11:4:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:mystring.ads:21:52:instantiated:variablestore.ads:11:4] [@GP_Shape:pragargs__if__and__forall__cmp__call_get] [@GP_Id:34] (Variablestore__variables__get___axiom.get(Variablestore__variables__equal__m2.m2) (i)) ))) in (
      ()))
      in () end ))))
   ;
    (val _f : bool
   ensures { ( (result = True) <-> (forall i   [@model_trace:68312] [@name:I]  : int.
    ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_357 : int.
     ( (temp___result_357 = (Variablestore__variables__length.length Variablestore__variables__equal__m1.m1)) /\ (Variablestore__variables__length.length__function_guard temp___result_357 Variablestore__variables__equal__m1.m1) ))) ) -> ( [@GP_Pretty_Ada:68302] ((epsilon temp___result_358 : int.
     ( (temp___result_358 = (Variablestore__variables__get.get Variablestore__variables__equal__m1.m1 i)) /\ (Variablestore__variables__get.get__function_guard temp___result_358 Variablestore__variables__equal__m1.m1 i) )) = (epsilon temp___result_359 : int.
     ( (temp___result_359 = (Variablestore__variables__get.get Variablestore__variables__equal__m2.m2 i)) /\ (Variablestore__variables__get.get__function_guard temp___result_359 Variablestore__variables__equal__m2.m2 i) ))) ) )) )} 
   in _f) )))) else (
   (Boolean.of_int((1 : int))))) in (
   ()))
   in () end ;
  variablestore__variables__equal__result.bool__content )
end

(* Module for defining the value of the aggregate at mystring.adb:72 instantiated at variablestore.ads:11, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_367___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_367 as Temp_____aggregate_def_367
 use        Array__Int__Standard__character as Array__Int__Standard__character

 axiom def_axiom :
  (forall temp___369   : int.
   (let temp___368 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_367.temp_____aggregate_def_367 temp___369) in (
    (if ((Standard__character___axiom.dynamic_invariant temp___369 True True True True)) then (
     (forall temp___370   : int.
      ((Standard__character__rep.to_rep (Array__Int__Standard__character.get temp___368 temp___370)) = temp___369))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "substring" defined at mystring.ads:26 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Variablestore__variables__substring__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Variablestore__variables__mystring as Variablestore__variables__mystring
 use        Variablestore__variables__length as Variablestore__variables__length
 use        Variablestore__variables__length___axiom as Variablestore__variables__length___axiom
 use        Variablestore__variables__substring__m as Variablestore__variables__substring__m
 use        Variablestore__variables__substring__from as Variablestore__variables__substring__from
 use        Variablestore__variables__substring__to as Variablestore__variables__substring__to
 use        Variablestore__variables__mystring___axiom as Variablestore__variables__mystring___axiom
 use        Variablestore__variables__substring__r as Variablestore__variables__substring__r
 use        Variablestore__variables__substring__j as Variablestore__variables__substring__j
 use        Variablestore__variables__substring__L_4__i as Variablestore__variables__substring__L_4__i
 use        Variablestore__variables__mystring__T13s as Variablestore__variables__mystring__T13s
 use        Variablestore__variables__mystring__T13s__rep as Variablestore__variables__mystring__T13s__rep
 use        Variablestore__variables__TmystringstrD1 as Variablestore__variables__TmystringstrD1
 use        Variablestore__variables__substring__L_4 as Variablestore__variables__substring__L_4
 use        Variablestore__variables__substring__L_4__T293s as Variablestore__variables__substring__L_4__T293s
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_367 as Temp_____aggregate_def_367
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Variablestore__variables__length___axiom as Variablestore__variables__length___axiom
 use        Variablestore__variables__substring__m___axiom as Variablestore__variables__substring__m___axiom
 use        Variablestore__variables__substring__from___axiom as Variablestore__variables__substring__from___axiom
 use        Variablestore__variables__substring__to___axiom as Variablestore__variables__substring__to___axiom
 use        Variablestore__variables__mystringstr___axiom as Variablestore__variables__mystringstr___axiom
 use        Variablestore__variables__mystring___axiom as Variablestore__variables__mystring___axiom
 use        Variablestore__variables__TmystringstrD1___axiom as Variablestore__variables__TmystringstrD1___axiom
 use        Variablestore__variables__mystring__T13s___axiom as Variablestore__variables__mystring__T13s___axiom
 use        Variablestore__variables__substring__r___axiom as Variablestore__variables__substring__r___axiom
 use        Variablestore__variables__substring__j___axiom as Variablestore__variables__substring__j___axiom
 use        Variablestore__variables__substring__L_4___axiom as Variablestore__variables__substring__L_4___axiom
 use        Variablestore__variables__substring__L_4__i___axiom as Variablestore__variables__substring__L_4__i___axiom
 use        Temp_____aggregate_def_367___axiom as Temp_____aggregate_def_367___axiom
 use        Variablestore__variables__substring__L_4__T293s___axiom as Variablestore__variables__substring__L_4__T293s___axiom

 val variablestore__variables__substring__result [@model_trace:68401@result] [@model_projected] [@name:Substring]  : Variablestore__variables__mystring.mystring__ref 
 
 let def [#"mystring.ads" 26 0 0][@GP_Subp:mystring.ads:26] 
   (__void_param : unit)
  requires { [#"mystring.ads" 26 0 0] true }
  ensures { [#"mystring.ads" 26 0 0] ([#"mystring.ads" 28 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Id:45] [@GP_Shape:pragargs__cmp] [@comment:     Post => Length(Substring'Result) = To - From + 1;              ^ mystring.ads:28:14:instantiated:variablestore.ads:11:4:VC_POSTCONDITION] [@model_vc_post] [@GP_Sloc:mystring.ads:28:14:instantiated:variablestore.ads:11:4] ( [@GP_Pretty_Ada:68796] [@GP_Sloc:mystring.ads:28:14:instantiated:variablestore.ads:11:4] ((epsilon temp___result_385 : int.
   ( (temp___result_385 = (Variablestore__variables__length.length variablestore__variables__substring__result.Variablestore__variables__mystring.mystring__content)) /\ (Variablestore__variables__length.length__function_guard temp___result_385 variablestore__variables__substring__result.Variablestore__variables__mystring.mystring__content) )) = ((Variablestore__variables__substring__to.to__ - Variablestore__variables__substring__from.from) + (1 : int))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:26 instantiated at variablestore.ads:11 *)
  ;
   assume {  (Variablestore__variables__mystring___axiom.dynamic_invariant Variablestore__variables__substring__m.m True False True True) };
   assume {  (Standard__positive___axiom.dynamic_invariant Variablestore__variables__substring__from.from True False True True) };
   assume {  (Standard__positive___axiom.dynamic_invariant Variablestore__variables__substring__to.to__ True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:26 instantiated at variablestore.ads:11 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:26 instantiated at variablestore.ads:11 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Variablestore__variables__substring__from.from <= Variablestore__variables__substring__to.to__)) ((Variablestore__variables__substring__to.to__ <= (Variablestore__variables__length___axiom.length(Variablestore__variables__substring__m.m))))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:26 instantiated at variablestore.ads:11 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:68380] (Variablestore__variables__substring__from.from <= Variablestore__variables__substring__to.to__) ) /\ ( [@GP_Pretty_Ada:68383] (Variablestore__variables__substring__to.to__ <= (epsilon temp___result_384 : int.
   ( (temp___result_384 = (Variablestore__variables__length.length Variablestore__variables__substring__m.m)) /\ (Variablestore__variables__length.length__function_guard temp___result_384 Variablestore__variables__substring__m.m) ))) ) ) };
   try
   ( ();
   ([#"mystring.adb" 72 0 0] ( (let variablestore__variables__substring__r__assume = { Variablestore__variables__mystring.__split_fields = { Variablestore__variables__mystring.rec__variablestore__variables__mystring__length = (Variablestore__variables__mystring__T13s__rep.of_rep(([#"mystring.adb" 72 0 0] ( [@GP_Sloc:mystring.adb:72:44:instantiated:variablestore.ads:11:4] [@vc:annotation] [@GP_Id:37] [@GP_Reason:VC_RANGE_CHECK] [@comment:      R : MyString := (Length => To - From + 1, Str => (others => ' '));                                            ^ mystring.adb:72:44:instantiated:variablestore.ads:11:4:VC_RANGE_CHECK] [@GP_Shape:r_decl__aggr__typeconv__add] (Variablestore__variables__mystring__T13s.range_check_(([#"mystring.adb" 72 0 0] ( [@GP_Sloc:mystring.adb:72:44:instantiated:variablestore.ads:11:4] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:      R : MyString := (Length => To - From + 1, Str => (others => ' '));                                            ^ mystring.adb:72:44:instantiated:variablestore.ads:11:4:VC_OVERFLOW_CHECK] [@GP_Id:36] [@GP_Shape:r_decl__aggr__typeconv__add] (Standard__integer.range_check_(((Variablestore__variables__substring__to.to__ - Variablestore__variables__substring__from.from) + (1 : int)))) )))) )))); Variablestore__variables__mystring.rec__variablestore__variables__mystring__str = (Temp_____aggregate_def_367.temp_____aggregate_def_367((32 : int))) } } in (
     (Variablestore__variables__substring__r.r__split_fields.Variablestore__variables__mystring.__split_fields__content <- ( variablestore__variables__substring__r__assume.Variablestore__variables__mystring.__split_fields ))))
   ;
    assume {  (Variablestore__variables__mystring___axiom.dynamic_invariant { Variablestore__variables__mystring.__split_fields = Variablestore__variables__substring__r.r__split_fields.Variablestore__variables__mystring.__split_fields__content } True False True True) } ));
   ([#"mystring.adb" 73 0 0] ());
   ([#"mystring.adb" 73 0 0] ( [#"mystring.adb" 73 0 0] (Variablestore__variables__substring__j.j.int__content <- ( (1 : int) ));
   [#"mystring.adb" 73 0 0] assume { [#"mystring.adb" 73 0 0] (Standard__positive___axiom.dynamic_invariant Variablestore__variables__substring__j.j.int__content True False True True) } ));
   ([#"mystring.adb" 75 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:75:25:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 75 0 0] (let temp___371 [@mlw:proxy_symbol] [@introduced] = Variablestore__variables__substring__from.from in (
   (let temp___372 [@mlw:proxy_symbol] [@introduced] = Variablestore__variables__substring__to.to__ in (
    ( [#"mystring.adb" 75 0 0] (Variablestore__variables__substring__L_4__i.i.int__content <- ( temp___371 ));
    () (* Translation of an Ada loop from mystring.adb:75 instantiated at variablestore.ads:11 *)
    ;
    (if ((Boolean.andb((temp___371 <= Variablestore__variables__substring__L_4__i.i.int__content)) ((Variablestore__variables__substring__L_4__i.i.int__content <= temp___372)))) then (
     [#"mystring.adb" 75 0 0] try
      ( [#"mystring.adb" 75 0 0] begin ensures {true} let _ = (let _ = Variablestore__variables__substring__L_4__i.i.int__content in (
       ()))
       in () end ;
      (let temp___380 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 75 0 0] (val _f : int
      ensures {[#"mystring.adb" 75 0 0] (result = Variablestore__variables__substring__L_4__i.i.int__content)} 
      in _f) in (
       ( [#"mystring.adb" 75 0 0] begin ensures {true} let _ = (let _ = Variablestore__variables__substring__j.j.int__content in (
        ()))
        in () end ;
       (let temp___379 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 75 0 0] (val _f : int
       ensures {[#"mystring.adb" 75 0 0] (result = Variablestore__variables__substring__j.j.int__content)} 
       in _f) in (
        ( [#"mystring.adb" 75 0 0] begin ensures {true} let _ = (let _ = { Variablestore__variables__mystring.__split_fields = Variablestore__variables__substring__r.r__split_fields.Variablestore__variables__mystring.__split_fields__content } in (
         ()))
         in () end ;
        (let temp___377 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 75 0 0] (val _f : Variablestore__variables__mystring.mystring
        ensures {[#"mystring.adb" 75 0 0] (result = { Variablestore__variables__mystring.__split_fields = Variablestore__variables__substring__r.r__split_fields.Variablestore__variables__mystring.__split_fields__content })} 
        in _f) in (
         ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:75 instantiated at variablestore.ads:11 *)
         ;
         () (* While loop translating the Ada loop from mystring.adb:75 instantiated at variablestore.ads:11 *)
         ;
         (let temp___inv_381 [@mlw:proxy_symbol] [@introduced] = (Variablestore__variables__substring__j.j.int__content = ([#"mystring.adb" 76 0 0] ( [@comment:         pragma Loop_Invariant (J = I - From + 1);                                              ^ mystring.adb:76:46:instantiated:variablestore.ads:11:4:VC_OVERFLOW_CHECK] [@GP_Shape:L_4_while__pragargs__cmp__add] [@GP_Id:42] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:76:46:instantiated:variablestore.ads:11:4] (Standard__integer.range_check_((([#"mystring.adb" 76 0 0] ( [@comment:         pragma Loop_Invariant (J = I - From + 1);                                       ^ mystring.adb:76:39:instantiated:variablestore.ads:11:4:VC_OVERFLOW_CHECK] [@GP_Id:41] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:76:39:instantiated:variablestore.ads:11:4] [@GP_Shape:L_4_while__pragargs__cmp__add__sub] (Standard__integer.range_check_((Variablestore__variables__substring__L_4__i.i.int__content - Variablestore__variables__substring__from.from))) )) + (1 : int)))) ))) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
         ;
          while True do
          invariant { 
           ([#"mystring.adb" 76 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                 ^ mystring.adb:76:33:instantiated:variablestore.ads:11:4:VC_LOOP_INVARIANT] [@GP_Sloc:mystring.adb:76:33:instantiated:variablestore.ads:11:4] [@GP_Id:43] [@vc:annotation] [@GP_Shape:L_4_while__pragargs__cmp] ( [@GP_Pretty_Ada:111519] [@GP_Sloc:mystring.adb:76:33:instantiated:variablestore.ads:11:4] (Variablestore__variables__substring__j.j.int__content = ((Variablestore__variables__substring__L_4__i.i.int__content - Variablestore__variables__substring__from.from) + (1 : int))) ) ))
           }
          ( () (* Assume implicit invariants from the loop mystring.adb:75 instantiated at variablestore.ads:11 *)
          ;
           assume {  (Boolean.andb(( ( ( ( ( ( true /\ (Variablestore__variables__mystring___axiom.dynamic_invariant { Variablestore__variables__mystring.__split_fields = Variablestore__variables__substring__r.r__split_fields.Variablestore__variables__mystring.__split_fields__content } True True True True) )/\({ Variablestore__variables__mystring.__split_fields = Variablestore__variables__substring__r.r__split_fields.Variablestore__variables__mystring.__split_fields__content }.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length = temp___377.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length) ) /\ (Standard__positive___axiom.dynamic_invariant Variablestore__variables__substring__j.j.int__content True True True True) )/\true ) /\ (if (( True \/ (Variablestore__variables__substring__from.from <= Variablestore__variables__substring__to.to__) )) then (
           (Variablestore__variables__substring__L_4__T293s.dynamic_property Variablestore__variables__substring__from.from Variablestore__variables__substring__to.to__ Variablestore__variables__substring__L_4__i.i.int__content)) else true) )/\true )) (( (Variablestore__variables__substring__from.from <= Variablestore__variables__substring__L_4__i.i.int__content) /\ (Variablestore__variables__substring__L_4__i.i.int__content <= Variablestore__variables__substring__to.to__) ))) };
          () (* Check for absence of RTE in the invariant of loop mystring.adb:75 instantiated at variablestore.ads:11 *)
          ;
          () (* Loop statements appearing after the loop invariant of loop mystring.adb:75 instantiated at variablestore.ads:11 *)
          ;
          ();
          ( [@GP_Sloc:mystring.adb:77:10:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 77 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:77:16:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 77 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:77:19:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 77 0 0] (let temp___376 [@mlw:proxy_symbol] [@introduced] = (let temp___375 [@mlw:proxy_symbol] [@introduced] = { Variablestore__variables__mystring.__split_fields = Variablestore__variables__substring__r.r__split_fields.Variablestore__variables__mystring.__split_fields__content } in (
           ( [#"mystring.adb" 77 0 0] begin ensures {true} let _ = (let _ = temp___375.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str in (
            ()))
            in () end ;
           { ( temp___375 ) with Variablestore__variables__mystring.__split_fields = { ( temp___375.Variablestore__variables__mystring.__split_fields ) with Variablestore__variables__mystring.rec__variablestore__variables__mystring__str = (let temp___374 [@mlw:proxy_symbol] [@introduced] = { Variablestore__variables__mystring.__split_fields = Variablestore__variables__substring__r.r__split_fields.Variablestore__variables__mystring.__split_fields__content }.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str in (
            (Array__Int__Standard__character.set({ Variablestore__variables__mystring.__split_fields = Variablestore__variables__substring__r.r__split_fields.Variablestore__variables__mystring.__split_fields__content }.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str) (( [#"mystring.adb" 77 0 0] assert { [#"mystring.adb" 77 0 0] ([#"mystring.adb" 77 0 0] ( [@GP_Shape:L_4_while__r_assign__ixdcomp] [@GP_Sloc:mystring.adb:77:16:instantiated:variablestore.ads:11:4] [@vc:annotation] [@comment:         R.Str(J) := M.Str(I);                ^ mystring.adb:77:16:instantiated:variablestore.ads:11:4:VC_INDEX_CHECK] [@GP_Id:39] [@GP_Reason:VC_INDEX_CHECK] ( (Variablestore__variables__TmystringstrD1.first <= Variablestore__variables__substring__j.j.int__content) /\ (Variablestore__variables__substring__j.j.int__content <= Variablestore__variables__TmystringstrD1.last) ) )) };
            Variablestore__variables__substring__j.j.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((let temp___373 [@mlw:proxy_symbol] [@introduced] = Variablestore__variables__substring__m.m.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str in (
             (Array__Int__Standard__character.get(temp___373) ((  assert {  ([#"mystring.adb" 77 0 0] ( [@GP_Sloc:mystring.adb:77:28:instantiated:variablestore.ads:11:4] [@GP_Shape:L_4_while__r_assign__ixdcomp] [@vc:annotation] [@comment:         R.Str(J) := M.Str(I);                            ^ mystring.adb:77:28:instantiated:variablestore.ads:11:4:VC_INDEX_CHECK] [@GP_Id:38] [@GP_Reason:VC_INDEX_CHECK] ( (Variablestore__variables__TmystringstrD1.first <= Variablestore__variables__substring__L_4__i.i.int__content) /\ (Variablestore__variables__substring__L_4__i.i.int__content <= Variablestore__variables__TmystringstrD1.last) ) )) };
             Variablestore__variables__substring__L_4__i.i.int__content )))))
            ))))))))
            } } )))
           in (
            (Variablestore__variables__substring__r.r__split_fields.Variablestore__variables__mystring.__split_fields__content <- ( temp___376.Variablestore__variables__mystring.__split_fields ))))
          ) );
          ( [@GP_Sloc:mystring.adb:78:10:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 78 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:78:15:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 78 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:78:12:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 78 0 0] [#"mystring.adb" 78 0 0] (Variablestore__variables__substring__j.j.int__content <- ( ([#"mystring.adb" 78 0 0] ( [@GP_Id:40] [@comment:         J := J + 1;                 ^ mystring.adb:78:17:instantiated:variablestore.ads:11:4:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_4_while__j_assign__add] [@GP_Sloc:mystring.adb:78:17:instantiated:variablestore.ads:11:4] (Standard__integer.range_check_((Variablestore__variables__substring__j.j.int__content + (1 : int)))) )) ))) );
          () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:75 instantiated at variablestore.ads:11 *)
          ;
          (if ((Variablestore__variables__substring__L_4__i.i.int__content = temp___372)) then (
            raise Variablestore__variables__substring__L_4.L_4));
          ([#"mystring.adb" 75 0 0] [#"mystring.adb" 75 0 0] (Variablestore__variables__substring__L_4__i.i.int__content <- ( (Variablestore__variables__substring__L_4__i.i.int__content + (1 : int)) )));
          (let temp___inv_381 [@mlw:proxy_symbol] [@introduced] = (Variablestore__variables__substring__j.j.int__content = ([#"mystring.adb" 76 0 0] ( [@comment:         pragma Loop_Invariant (J = I - From + 1);                                              ^ mystring.adb:76:46:instantiated:variablestore.ads:11:4:VC_OVERFLOW_CHECK] [@GP_Shape:L_4_while__pragargs__cmp__add] [@GP_Id:42] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:76:46:instantiated:variablestore.ads:11:4] (Standard__integer.range_check_((([#"mystring.adb" 76 0 0] ( [@comment:         pragma Loop_Invariant (J = I - From + 1);                                       ^ mystring.adb:76:39:instantiated:variablestore.ads:11:4:VC_OVERFLOW_CHECK] [@GP_Id:41] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:76:39:instantiated:variablestore.ads:11:4] [@GP_Shape:L_4_while__pragargs__cmp__add__sub] (Standard__integer.range_check_((Variablestore__variables__substring__L_4__i.i.int__content - Variablestore__variables__substring__from.from))) )) + (1 : int)))) ))) in (
            begin ensures {true} let _ = (let _ = () in (
            ()))
            in () end ))
           )
         done )))
         )))
        )))
       )
     with
      Variablestore__variables__substring__L_4.L_4 -> ()
     end)) )))
   ))
   ) );
   ( [@GP_Sloc:mystring.adb:80:14:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 80 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:80:7:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 80 0 0] ( [#"mystring.adb" 80 0 0] (variablestore__variables__substring__result.Variablestore__variables__mystring.mystring__content <- ( { Variablestore__variables__mystring.__split_fields = Variablestore__variables__substring__r.r__split_fields.Variablestore__variables__mystring.__split_fields__content } ));
   [#"mystring.adb" 80 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Variablestore__variables__length___axiom.length(variablestore__variables__substring__result.Variablestore__variables__mystring.mystring__content)) = ([#"mystring.ads" 28 0 0] ( [@GP_Id:44] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:     Post => Length(Substring'Result) = To - From + 1;                                                   ^ mystring.ads:28:51:instantiated:variablestore.ads:11:4:VC_OVERFLOW_CHECK] [@GP_Shape:pragargs__cmp__add] [@GP_Sloc:mystring.ads:28:51:instantiated:variablestore.ads:11:4] (Standard__integer.range_check_(((Variablestore__variables__substring__to.to__ - Variablestore__variables__substring__from.from) + (1 : int)))) ))) in (
   ()))
   in () end ;
  variablestore__variables__substring__result.Variablestore__variables__mystring.mystring__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_line" defined at mystring.ads:33 instantiated at variablestore.ads:11, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Variablestore__variables__get_line__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Variablestore__variables__mystring as Variablestore__variables__mystring
 use        Variablestore__variables__get_line__m as Variablestore__variables__get_line__m
 use        Variablestore__variables__mystring___axiom as Variablestore__variables__mystring___axiom
 use        Ada__text_io__get_line__2___axiom as Ada__text_io__get_line__2___axiom
 use        Variablestore__variables__mystring__T13s as Variablestore__variables__mystring__T13s
 use        Variablestore__variables__mystring__T13s__rep as Variablestore__variables__mystring__T13s__rep
 use        Variablestore__variables__TmystringstrD1 as Variablestore__variables__TmystringstrD1
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__get_line__2___axiom as Ada__text_io__get_line__2___axiom
 use        Variablestore__variables__get_line__m___axiom as Variablestore__variables__get_line__m___axiom
 use        Variablestore__variables__mystringstr___axiom as Variablestore__variables__mystringstr___axiom
 use        Variablestore__variables__mystring___axiom as Variablestore__variables__mystring___axiom
 use        Variablestore__variables__TmystringstrD1___axiom as Variablestore__variables__TmystringstrD1___axiom
 use        Variablestore__variables__mystring__T13s___axiom as Variablestore__variables__mystring__T13s___axiom

 let def [#"mystring.ads" 33 0 0][@GP_Subp:mystring.ads:33] 
   (__void_param : unit)
  requires { [#"mystring.ads" 33 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:33 instantiated at variablestore.ads:11 *)
  ;
  [#"mystring.ads" 33 0 0] assume { [#"mystring.ads" 33 0 0] (Variablestore__variables__mystring___axiom.dynamic_invariant { Variablestore__variables__mystring.__split_fields = Variablestore__variables__get_line__m.m__split_fields.Variablestore__variables__mystring.__split_fields__content } False False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:33 instantiated at variablestore.ads:11 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:33 instantiated at variablestore.ads:11 *)
  ;
  [#"mystring.ads" 33 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:33 instantiated at variablestore.ads:11 *)
  ;
  [#"mystring.ads" 33 0 0] try
   ( ();
   ( [@GP_Sloc:mystring.adb:85:18:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 85 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:85:18:instantiated:variablestore.ads:11:4] ([#"mystring.adb" 85 0 0] (let ada__text_io__get_line__2__item__compl = ( [#"mystring.adb" 85 0 0] assert { [#"mystring.adb" 85 0 0] ([#"mystring.adb" 85 0 0] ( [@GP_Sloc:mystring.adb:85:44:instantiated:variablestore.ads:11:4] [@GP_Id:46] [@vc:annotation] [@comment:      Ada.Text_IO.Get_Line(Item => String(M.Str), Last => M.Length);                                            ^ mystring.adb:85:44:instantiated:variablestore.ads:11:4:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:call_get_line__2__typeconv__selectcomp] (Standard__string.dynamic_property(Standard__positive.first) (Standard__positive.last) (Variablestore__variables__TmystringstrD1.first) (Variablestore__variables__TmystringstrD1.last)) )) };
   (Standard__string.of_array({ Variablestore__variables__mystring.__split_fields = Variablestore__variables__get_line__m.m__split_fields.Variablestore__variables__mystring.__split_fields__content }.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str) (Variablestore__variables__TmystringstrD1.first) (Variablestore__variables__TmystringstrD1.last)) ) in (
     let ada__text_io__get_line__2__last = { int__content = (Variablestore__variables__mystring__T13s__rep.to_rep({ Variablestore__variables__mystring.__split_fields = Variablestore__variables__get_line__m.m__split_fields.Variablestore__variables__mystring.__split_fields__content }.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length)) } in 
     let ada__text_io__get_line__2__item = { Array__Int__Standard__character.map__content = (Standard__string.to_array(ada__text_io__get_line__2__item__compl)) } in 
     ( (Ada__text_io__get_line__2___axiom.get_line__2(ada__text_io__get_line__2__item) ((Standard__integer__rep.of_rep((Standard__string.first(ada__text_io__get_line__2__item__compl))))) ((Standard__integer__rep.of_rep((Standard__string.last(ada__text_io__get_line__2__item__compl))))) (ada__text_io__get_line__2__last));
     (let temp___388 [@mlw:proxy_symbol] [@introduced] = (let temp___387 [@mlw:proxy_symbol] [@introduced] = { Variablestore__variables__mystring.__split_fields = Variablestore__variables__get_line__m.m__split_fields.Variablestore__variables__mystring.__split_fields__content } in (
      (  begin ensures {true} let _ = (let _ = temp___387.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__str in (
       ()))
       in () end ;
      { ( temp___387 ) with Variablestore__variables__mystring.__split_fields = { ( temp___387.Variablestore__variables__mystring.__split_fields ) with Variablestore__variables__mystring.rec__variablestore__variables__mystring__str = (let temp___386 [@mlw:proxy_symbol] [@introduced] = (Standard__string.of_array(ada__text_io__get_line__2__item.Array__Int__Standard__character.map__content) ((Standard__string.first(ada__text_io__get_line__2__item__compl))) ((Standard__string.last(ada__text_io__get_line__2__item__compl)))) in (
       (Array__Int__Standard__character.slide((Standard__string.to_array(temp___386))) ((Standard__string.first(temp___386))) (Variablestore__variables__TmystringstrD1.first))))
       } } )))
      in (
       (Variablestore__variables__get_line__m.m__split_fields.Variablestore__variables__mystring.__split_fields__content <- ( temp___388.Variablestore__variables__mystring.__split_fields ))))
     ;
     (let temp___390 [@mlw:proxy_symbol] [@introduced] = (let temp___389 [@mlw:proxy_symbol] [@introduced] = { Variablestore__variables__mystring.__split_fields = Variablestore__variables__get_line__m.m__split_fields.Variablestore__variables__mystring.__split_fields__content } in (
      (  begin ensures {true} let _ = (let _ = temp___389.Variablestore__variables__mystring.__split_fields.Variablestore__variables__mystring.rec__variablestore__variables__mystring__length in (
       ()))
       in () end ;
      { ( temp___389 ) with Variablestore__variables__mystring.__split_fields = { ( temp___389.Variablestore__variables__mystring.__split_fields ) with Variablestore__variables__mystring.rec__variablestore__variables__mystring__length = (Variablestore__variables__mystring__T13s__rep.of_rep(([#"mystring.adb" 85 0 0] ( [@comment:      Ada.Text_IO.Get_Line(Item => String(M.Str), Last => M.Length);                                                            ^ mystring.adb:85:60:instantiated:variablestore.ads:11:4:VC_RANGE_CHECK] [@GP_Id:47] [@vc:annotation] [@GP_Shape:call_get_line__2__selectcomp] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:mystring.adb:85:60:instantiated:variablestore.ads:11:4] (Variablestore__variables__mystring__T13s.range_check_(ada__text_io__get_line__2__last.int__content)) )))) } } )))
      in (
       (Variablestore__variables__get_line__m.m__split_fields.Variablestore__variables__mystring.__split_fields__content <- ( temp___390.Variablestore__variables__mystring.__split_fields ))))
      )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking DIC of default value and absence of runtime errors in the private part of "database" defined at variablestore.ads:15, created in Gnat2Why.Types.Generate_VCs_For_Type *)
module Variablestore__database__default_checks
 use        "_gnatprove_standard".Main
 use        "int".Int

 let def [@GP_Subp:variablestore.ads:15] 
   (__void_param : unit)
  requires {  true }
  ensures {  true }
   = [@vc:divergent]
  ( () )
end

(* Module for checking contracts and absence of run-time errors in subprogram "init" defined at variablestore.ads:17, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Variablestore__init__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database
 use        Variablestore__init__d as Variablestore__init__d
 use        Variablestore__database___axiom as Variablestore__database___axiom
 use        Variablestore__database___axiom as Variablestore__database___axiom
 use        Variablestore__init__d___axiom as Variablestore__init__d___axiom

 let def [#"variablestore.ads" 17 0 0][@GP_Subp:variablestore.ads:17] 
   (__void_param : unit)
  requires { [#"variablestore.ads" 17 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram variablestore.ads:17 *)
  ;
  [#"variablestore.ads" 17 0 0] assume { [#"variablestore.ads" 17 0 0] (Variablestore__database___axiom.dynamic_invariant Variablestore__init__d.d.Variablestore__database.database__content False False True True) };
  () (* Check for RTE in the Pre of the subprogram variablestore.ads:17 *)
  ;
  [#"variablestore.ads" 17 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram variablestore.ads:17 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "has_variable" defined at variablestore.ads:19, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Variablestore__has_variable__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__has_variable__d as Variablestore__has_variable__d
 use        Variablestore__has_variable__v as Variablestore__has_variable__v
 use        Variablestore__variable___axiom as Variablestore__variable___axiom
 use        Variablestore__database___axiom as Variablestore__database___axiom
 use        Variablestore__database___axiom as Variablestore__database___axiom
 use        Variablestore__has_variable__d___axiom as Variablestore__has_variable__d___axiom
 use        Variablestore__has_variable__v___axiom as Variablestore__has_variable__v___axiom
 use        Variablestore__variable___axiom as Variablestore__variable___axiom

 val variablestore__has_variable__result [@model_trace:2680@result] [@model_projected] [@name:Has_Variable]  : bool__ref 
 
 let def [#"variablestore.ads" 19 0 0][@GP_Subp:variablestore.ads:19] 
   (__void_param : unit)
  requires { [#"variablestore.ads" 19 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram variablestore.ads:19 *)
  ;
  [#"variablestore.ads" 19 0 0] assume { [#"variablestore.ads" 19 0 0] (Variablestore__database___axiom.dynamic_invariant Variablestore__has_variable__d.d True False True True) };
  [#"variablestore.ads" 19 0 0] assume { [#"variablestore.ads" 19 0 0] (Variablestore__variable___axiom.dynamic_invariant Variablestore__has_variable__v.v True False True True) };
  () (* Check for RTE in the Pre of the subprogram variablestore.ads:19 *)
  ;
  [#"variablestore.ads" 19 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram variablestore.ads:19 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get__2" defined at variablestore.ads:21, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Variablestore__get__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__has_variable as Variablestore__has_variable
 use        Variablestore__has_variable___axiom as Variablestore__has_variable___axiom
 use        Variablestore__get__2__d as Variablestore__get__2__d
 use        Variablestore__get__2__v as Variablestore__get__2__v
 use        Variablestore__variable___axiom as Variablestore__variable___axiom
 use        Variablestore__database___axiom as Variablestore__database___axiom
 use        Variablestore__database___axiom as Variablestore__database___axiom
 use        Variablestore__has_variable___axiom as Variablestore__has_variable___axiom
 use        Variablestore__get__2__d___axiom as Variablestore__get__2__d___axiom
 use        Variablestore__get__2__v___axiom as Variablestore__get__2__v___axiom
 use        Variablestore__variable___axiom as Variablestore__variable___axiom

 val variablestore__get__2__result [@model_trace:2708@result] [@model_projected] [@name:Get]  : int__ref 
 
 let def [#"variablestore.ads" 21 0 0][@GP_Subp:variablestore.ads:21] 
   (__void_param : unit)
  requires { [#"variablestore.ads" 21 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram variablestore.ads:21 *)
  ;
  [#"variablestore.ads" 21 0 0] assume { [#"variablestore.ads" 21 0 0] (Variablestore__database___axiom.dynamic_invariant Variablestore__get__2__d.d True False True True) };
  [#"variablestore.ads" 21 0 0] assume { [#"variablestore.ads" 21 0 0] (Variablestore__variable___axiom.dynamic_invariant Variablestore__get__2__v.v True False True True) };
  () (* Check for RTE in the Pre of the subprogram variablestore.ads:21 *)
  ;
  [#"variablestore.ads" 21 0 0] begin ensures {true} let _ = (let _ = (Variablestore__has_variable___axiom.has_variable(Variablestore__get__2__d.d) (Variablestore__get__2__v.v)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram variablestore.ads:21 *)
  ;
  [#"variablestore.ads" 21 0 0] assume { [#"variablestore.ads" 21 0 0] ( [@GP_Pretty_Ada:69225] ((epsilon temp___result_395 : bool.
   ( (temp___result_395 = (Variablestore__has_variable.has_variable Variablestore__get__2__d.d Variablestore__get__2__v.v)) /\ (Variablestore__has_variable.has_variable__function_guard temp___result_395 Variablestore__get__2__d.d Variablestore__get__2__v.v) )) = True) ) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "length__2" defined at variablestore.ads:37, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Variablestore__length__2__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__length__2__d as Variablestore__length__2__d
 use        Variablestore__database___axiom as Variablestore__database___axiom
 use        Variablestore__database___axiom as Variablestore__database___axiom
 use        Variablestore__length__2__d___axiom as Variablestore__length__2__d___axiom

 val variablestore__length__2__result [@model_projected] [@model_trace:2932@result] [@name:Length]  : int__ref 
 
 let def [#"variablestore.ads" 37 0 0][@GP_Subp:variablestore.ads:37] 
   (__void_param : unit)
  requires { [#"variablestore.ads" 37 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram variablestore.ads:37 *)
  ;
  [#"variablestore.ads" 37 0 0] assume { [#"variablestore.ads" 37 0 0] (Variablestore__database___axiom.dynamic_invariant Variablestore__length__2__d.d True False True True) };
  () (* Check for RTE in the Pre of the subprogram variablestore.ads:37 *)
  ;
  [#"variablestore.ads" 37 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram variablestore.ads:37 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "put" defined at variablestore.ads:24, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Variablestore__put__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Variablestore__database as Variablestore__database
 use        Variablestore__has_variable as Variablestore__has_variable
 use        Variablestore__has_variable___axiom as Variablestore__has_variable___axiom
 use        Variablestore__put__d as Variablestore__put__d
 use        Variablestore__put__v as Variablestore__put__v
 use        Variablestore__put__value as Variablestore__put__value
 use        Variablestore__length__2 as Variablestore__length__2
 use        Variablestore__length__2___axiom as Variablestore__length__2___axiom
 use        Variablestore__variable___axiom as Variablestore__variable___axiom
 use        Variablestore__database___axiom as Variablestore__database___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Variablestore__database___axiom as Variablestore__database___axiom
 use        Variablestore__has_variable___axiom as Variablestore__has_variable___axiom
 use        Variablestore__put__d___axiom as Variablestore__put__d___axiom
 use        Variablestore__put__v___axiom as Variablestore__put__v___axiom
 use        Variablestore__put__value___axiom as Variablestore__put__value___axiom
 use        Variablestore__length__2___axiom as Variablestore__length__2___axiom
 use        Ada__containers__count_type___axiom as Ada__containers__count_type___axiom
 use        Variablestore__variable___axiom as Variablestore__variable___axiom

 let def [#"variablestore.ads" 24 0 0][@GP_Subp:variablestore.ads:24] 
   (__void_param : unit)
  requires { [#"variablestore.ads" 24 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram variablestore.ads:24 *)
  ;
  [#"variablestore.ads" 24 0 0] assume { [#"variablestore.ads" 24 0 0] (Variablestore__database___axiom.dynamic_invariant Variablestore__put__d.d.Variablestore__database.database__content True False True True) };
  [#"variablestore.ads" 24 0 0] assume { [#"variablestore.ads" 24 0 0] (Variablestore__variable___axiom.dynamic_invariant Variablestore__put__v.v True False True True) };
  [#"variablestore.ads" 24 0 0] assume { [#"variablestore.ads" 24 0 0] (Standard__integer___axiom.dynamic_invariant Variablestore__put__value.value True False True True) };
  () (* Check for RTE in the Pre of the subprogram variablestore.ads:24 *)
  ;
  [#"variablestore.ads" 24 0 0] begin ensures {true} let _ = (let _ = (Boolean.orb(((Variablestore__length__2___axiom.length__2(Variablestore__put__d.d.Variablestore__database.database__content)) < (1000 : int))) ((Variablestore__has_variable___axiom.has_variable(Variablestore__put__d.d.Variablestore__database.database__content) (Variablestore__put__v.v)))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram variablestore.ads:24 *)
  ;
  [#"variablestore.ads" 24 0 0] assume { [#"variablestore.ads" 24 0 0] ( [@GP_Pretty_Ada:69250] ( ((epsilon temp___result_397 : int.
   ( (temp___result_397 = (Variablestore__length__2.length__2 Variablestore__put__d.d.Variablestore__database.database__content)) /\ (Variablestore__length__2.length__2__function_guard temp___result_397 Variablestore__put__d.d.Variablestore__database.database__content) )) < (1000 : int)) \/ ((epsilon temp___result_398 : bool.
   ( (temp___result_398 = (Variablestore__has_variable.has_variable Variablestore__put__d.d.Variablestore__database.database__content Variablestore__put__v.v)) /\ (Variablestore__has_variable.has_variable__function_guard temp___result_398 Variablestore__put__d.d.Variablestore__database.database__content Variablestore__put__v.v) )) = True) ) ) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "remove" defined at variablestore.ads:27, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Variablestore__remove__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__database as Variablestore__database
 use        Variablestore__has_variable as Variablestore__has_variable
 use        Variablestore__has_variable___axiom as Variablestore__has_variable___axiom
 use        Variablestore__remove__d as Variablestore__remove__d
 use        Variablestore__remove__v as Variablestore__remove__v
 use        Variablestore__variable___axiom as Variablestore__variable___axiom
 use        Variablestore__database___axiom as Variablestore__database___axiom
 use        Variablestore__database___axiom as Variablestore__database___axiom
 use        Variablestore__has_variable___axiom as Variablestore__has_variable___axiom
 use        Variablestore__remove__d___axiom as Variablestore__remove__d___axiom
 use        Variablestore__remove__v___axiom as Variablestore__remove__v___axiom
 use        Variablestore__variable___axiom as Variablestore__variable___axiom

 let def [#"variablestore.ads" 27 0 0][@GP_Subp:variablestore.ads:27] 
   (__void_param : unit)
  requires { [#"variablestore.ads" 27 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram variablestore.ads:27 *)
  ;
  [#"variablestore.ads" 27 0 0] assume { [#"variablestore.ads" 27 0 0] (Variablestore__database___axiom.dynamic_invariant Variablestore__remove__d.d.Variablestore__database.database__content True False True True) };
  [#"variablestore.ads" 27 0 0] assume { [#"variablestore.ads" 27 0 0] (Variablestore__variable___axiom.dynamic_invariant Variablestore__remove__v.v True False True True) };
  () (* Check for RTE in the Pre of the subprogram variablestore.ads:27 *)
  ;
  [#"variablestore.ads" 27 0 0] begin ensures {true} let _ = (let _ = (Variablestore__has_variable___axiom.has_variable(Variablestore__remove__d.d.Variablestore__database.database__content) (Variablestore__remove__v.v)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram variablestore.ads:27 *)
  ;
  [#"variablestore.ads" 27 0 0] assume { [#"variablestore.ads" 27 0 0] ( [@GP_Pretty_Ada:69269] ((epsilon temp___result_400 : bool.
   ( (temp___result_400 = (Variablestore__has_variable.has_variable Variablestore__remove__d.d.Variablestore__database.database__content Variablestore__remove__v.v)) /\ (Variablestore__has_variable.has_variable__function_guard temp___result_400 Variablestore__remove__d.d.Variablestore__database.database__content Variablestore__remove__v.v) )) = True) ) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "from_string" defined at variablestore.ads:30, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Variablestore__from_string__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Variablestore__variable as Variablestore__variable
 use        Variablestore__from_string__s as Variablestore__from_string__s
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Variablestore__from_string__s___axiom as Variablestore__from_string__s___axiom
 use        Variablestore__variable___axiom as Variablestore__variable___axiom

 val variablestore__from_string__result [@name:From_String] [@model_projected] [@model_trace:2829@result]  : Variablestore__variable.variable__ref 
 
 let def [#"variablestore.ads" 30 0 0][@GP_Subp:variablestore.ads:30] 
   (__void_param : unit)
  requires { [#"variablestore.ads" 30 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram variablestore.ads:30 *)
  ;
  [#"variablestore.ads" 30 0 0] assume { [#"variablestore.ads" 30 0 0] (Standard__string___axiom.dynamic_invariant Variablestore__from_string__s.s True False True True) };
  () (* Check for RTE in the Pre of the subprogram variablestore.ads:30 *)
  ;
  [#"variablestore.ads" 30 0 0] begin ensures {true} let _ = (let _ = (([#"variablestore.ads" 31 0 0] ( [@GP_Id:48] [@vc:annotation] [@GP_Shape:pragargs__cmp__typeconv__length_ref] [@GP_Reason:VC_RANGE_CHECK] [@comment:     Pre => S'Length <= Max_Variable_Length;              ^ variablestore.ads:31:14:VC_RANGE_CHECK] [@GP_Sloc:variablestore.ads:31:14] (Standard__integer.range_check_(( [#"variablestore.ads" 31 0 0] begin ensures {true} let _ = (let _ = Variablestore__from_string__s.s in (
   ()))
   in () end ;
  (Standard__string.length(Variablestore__from_string__s.s)) ))) )) <= (1024 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram variablestore.ads:30 *)
  ;
   assume {  ( [@GP_Pretty_Ada:69288] ((Standard__string.length Variablestore__from_string__s.s) <= (1024 : int)) ) } )
end

(* Module for checking contracts and absence of run-time errors in subprogram "to_string" defined at variablestore.ads:32, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Variablestore__to_string__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Variablestore__to_string__v as Variablestore__to_string__v
 use        Variablestore__variable___axiom as Variablestore__variable___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Variablestore__to_string__v___axiom as Variablestore__to_string__v___axiom
 use        Variablestore__variable___axiom as Variablestore__variable___axiom

 val variablestore__to_string__result [@name:To_String] [@model_trace:2857@result] [@model_projected]  : Standard__string.string__ref 
 
 let def [#"variablestore.ads" 32 0 0][@GP_Subp:variablestore.ads:32] 
   (__void_param : unit)
  requires { [#"variablestore.ads" 32 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram variablestore.ads:32 *)
  ;
  [#"variablestore.ads" 32 0 0] assume { [#"variablestore.ads" 32 0 0] (Variablestore__variable___axiom.dynamic_invariant Variablestore__to_string__v.v True False True True) };
  () (* Check for RTE in the Pre of the subprogram variablestore.ads:32 *)
  ;
  [#"variablestore.ads" 32 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram variablestore.ads:32 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "less" defined at variablestore.ads:34, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Variablestore__less__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__less__v1 as Variablestore__less__v1
 use        Variablestore__less__v2 as Variablestore__less__v2
 use        Variablestore__variable___axiom as Variablestore__variable___axiom
 use        Variablestore__less__v1___axiom as Variablestore__less__v1___axiom
 use        Variablestore__less__v2___axiom as Variablestore__less__v2___axiom
 use        Variablestore__variable___axiom as Variablestore__variable___axiom

 val variablestore__less__result [@model_projected] [@model_trace:2876@result] [@name:Less]  : bool__ref 
 
 let def [#"variablestore.ads" 34 0 0][@GP_Subp:variablestore.ads:34] 
   (__void_param : unit)
  requires { [#"variablestore.ads" 34 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram variablestore.ads:34 *)
  ;
  [#"variablestore.ads" 34 0 0] assume { [#"variablestore.ads" 34 0 0] (Variablestore__variable___axiom.dynamic_invariant Variablestore__less__v1.v1 True False True True) };
  [#"variablestore.ads" 34 0 0] assume { [#"variablestore.ads" 34 0 0] (Variablestore__variable___axiom.dynamic_invariant Variablestore__less__v2.v2 True False True True) };
  () (* Check for RTE in the Pre of the subprogram variablestore.ads:34 *)
  ;
  [#"variablestore.ads" 34 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram variablestore.ads:34 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "equal" defined at variablestore.ads:35, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Variablestore__equal__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__equal__v1 as Variablestore__equal__v1
 use        Variablestore__equal__v2 as Variablestore__equal__v2
 use        Variablestore__variable___axiom as Variablestore__variable___axiom
 use        Variablestore__equal__v1___axiom as Variablestore__equal__v1___axiom
 use        Variablestore__equal__v2___axiom as Variablestore__equal__v2___axiom
 use        Variablestore__variable___axiom as Variablestore__variable___axiom

 val variablestore__equal__result [@model_trace:2904@result] [@name:Equal] [@model_projected]  : bool__ref 
 
 let def [#"variablestore.ads" 35 0 0][@GP_Subp:variablestore.ads:35] 
   (__void_param : unit)
  requires { [#"variablestore.ads" 35 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram variablestore.ads:35 *)
  ;
  [#"variablestore.ads" 35 0 0] assume { [#"variablestore.ads" 35 0 0] (Variablestore__variable___axiom.dynamic_invariant Variablestore__equal__v1.v1 True False True True) };
  [#"variablestore.ads" 35 0 0] assume { [#"variablestore.ads" 35 0 0] (Variablestore__variable___axiom.dynamic_invariant Variablestore__equal__v2.v2 True False True True) };
  () (* Check for RTE in the Pre of the subprogram variablestore.ads:35 *)
  ;
  [#"variablestore.ads" 35 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram variablestore.ads:35 *)
   )
end

(* Module for checking contracts and absence of run-time errors in subprogram "print" defined at variablestore.ads:39, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Variablestore__print__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Variablestore__print__d as Variablestore__print__d
 use        Variablestore__database___axiom as Variablestore__database___axiom
 use        Variablestore__database___axiom as Variablestore__database___axiom
 use        Variablestore__print__d___axiom as Variablestore__print__d___axiom

 let def [#"variablestore.ads" 39 0 0][@GP_Subp:variablestore.ads:39] 
   (__void_param : unit)
  requires { [#"variablestore.ads" 39 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram variablestore.ads:39 *)
  ;
  [#"variablestore.ads" 39 0 0] assume { [#"variablestore.ads" 39 0 0] (Variablestore__database___axiom.dynamic_invariant Variablestore__print__d.d True False True True) };
  () (* Check for RTE in the Pre of the subprogram variablestore.ads:39 *)
  ;
  [#"variablestore.ads" 39 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram variablestore.ads:39 *)
   )
end
